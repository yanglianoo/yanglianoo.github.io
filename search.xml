<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>QEMU中自定义开发板</title>
      <link href="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/"/>
      <url>/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-QEMU中新增虚拟开发板"><a href="#1-QEMU中新增虚拟开发板" class="headerlink" title="1. QEMU中新增虚拟开发板"></a>1. QEMU中新增虚拟开发板</h1><blockquote><p>参考链接：<a href="https://quard-star-tutorial.readthedocs.io/zh_CN/latest/ch2.html">基于qemu-riscv从0开始构建嵌入式linux系统ch2. 添加qemu仿真板——Quard-Star板 — 主页 (quard-star-tutorial.readthedocs.io)</a></p><p>本文主要参考了上面的博文，复现一下在qemu中自定义板卡的过程，用于个人学习。</p></blockquote><p>前言：qemu内置支持了一些开发板，我们可以基于这些内置的板子来做操作系统等软件的配置，但是实际市面上很多板子qemu中是没有提供支持的，要是直接在硬件中进行软件验证会十分麻烦，还好qemu中可以支持用户自定义开发板，这样就可以虚拟的对开发板进行验证了。</p><p>在向qemu中注册自定义的板子需要向qemu中添加源码，然后重新编译，qemu源码安装的编译过程参考这一篇博客：<a href="https://yanglianoo.github.io/2023/06/11/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAQemu/">从源码构建Qemu | TimerのBlog (yanglianoo.github.io)</a></p><p>我们添加的板子cpu架构为riscv，进入qemu源码的<code>hw/riscv</code>目录下，可以看到如下图中的文件，其中qemu官方默认添加了几个riscv板子，比如：<code>virt</code>，<code>sifive</code>，其中<code>virt</code>，这块虚拟板子也是最常用的虚拟板子，常用于作为基于riscv操作系统的原型验证，比如<code>xv6，rvos</code>都是基于<code>qemu-virt</code>构建的。</p><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230612201442813.png" alt="image-20230612201442813"></p><p>再进入<code>include/hw/riscv</code>目录，这里放着虚拟板卡的头文件：</p><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230612202614817.png" alt="image-20230612202614817"></p><h1 id="2-quard-star开发板的硬件资源"><a href="#2-quard-star开发板的硬件资源" class="headerlink" title="2.quard_star开发板的硬件资源"></a>2.quard_star开发板的硬件资源</h1><p>我们将自定义的开发板名字命名为<code>quard_star</code>，理论上这块板子的硬件资源你可以随便定义，开发板的资源如下：</p><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/img3.png" alt="img3.png"></p><ul><li><p>CPU：8个64位的hart，<code>mmu</code>的虚拟地址翻译模式为<code>sv48</code></p></li><li><p>plic：平台级中断控制器</p></li><li><p>clint：内部中断控制器</p></li><li><p>mask-rom：32KB</p></li><li><p>PFLASH：32MB</p></li><li><p>DDR：1GB</p></li><li><p>NANO Flash：256MB</p></li><li><p>CAN：</p></li><li><p>DMA：</p></li><li><p>TIMER：</p></li><li><p>ETH：</p></li><li><p>USB：</p></li><li><p>SPI：</p></li><li><p>IIC：</p></li><li><p>ADC：</p></li><li><p>GPIO：</p></li><li><p>SDMMC：</p></li><li><p>UART：</p></li><li><p>RTC：</p></li><li><p>WATHDOG：</p></li></ul><p>我们的目标就是在qemu中创建这样一个开发板，需要依次在qemu中定义每一个硬件。接下来就来逐步添加每一个硬件</p><h1 id="3-添加quard-star板子"><a href="#3-添加quard-star板子" class="headerlink" title="3.添加quard-star板子"></a>3.添加quard-star板子</h1><blockquote><p>声明：以下使用的qemu源码版本均为<code>qemu-8.0.2</code>，参考代码为qemu的virt这块板子的代码，我们需要先让qemu识别到<code>quard-star</code>这块板子，然后再逐渐丰富板子的外设。</p></blockquote><p>注册<code>quard-star</code>板子需要修改如下几个文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`qemu-8.0.2/configs/devices/riscv64-softmmu/default.mak`</span><br><span class="line">`qemu-8.0.2/configs/devices/riscv32-softmmu/default.mak`</span><br><span class="line">`qemu-8.0.2/hw/riscv/meson.build`</span><br><span class="line">`qemu-8.0.2/hw/riscv/Kconfig`</span><br></pre></td></tr></table></figure><p>要在qemu中定义自己的虚拟板卡，需要在<code>hw/riscv</code>目录下增加一个和自己板子相关的<code>.c</code>文件，以及在<code>include/hw/riscv</code>目录下添加一个对应虚拟板子的<code>.h</code>文件，这里新增<code>quard_star.c</code>和<code>quard_star.h</code>文件，将其加入qemu编译体系内。</p><h2 id="3-1-文件修改"><a href="#3-1-文件修改" class="headerlink" title="3.1 文件修改"></a>3.1 文件修改</h2><ul><li><code>qemu-8.0.2/hw/riscv/meson.build</code></li></ul><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230613210722392.png" alt="image-20230613210722392"></p><ul><li><code>qemu-8.0.2/hw/riscv/Kconfig</code>：这里只暂时只选中一个串口设备。</li></ul><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230613210910355.png" alt="image-20230613210910355"></p><ul><li><code>qemu-8.0.2/configs/devices/riscv32-softmmu/default.mak</code></li></ul><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230613211119900.png" alt="image-20230613211119900"></p><ul><li><code>qemu-8.0.2/configs/devices/riscv64-softmmu/default.mak</code></li></ul><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230613215029879.png" alt="image-20230613215029879"></p><h2 id="3-2-添加源码"><a href="#3-2-添加源码" class="headerlink" title="3.2 添加源码"></a>3.2 添加源码</h2><h3 id="3-2-1-quard-star-h"><a href="#3-2-1-quard-star-h" class="headerlink" title="3.2.1 quard_star.h"></a>3.2.1 quard_star.h</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> HW_RISCV_QUARD_STAR__H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HW_RISCV_QUARD_STAR__H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/riscv/riscv_hart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/sysbus.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qom/object.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUARD_STAR_CPUS_MAX 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> QUARD_STAR_SOCKETS_MAX 8</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TYPE_RISCV_QUARD_STAR_MACHINE MACHINE_TYPE_NAME(<span class="string">&quot;quard-star&quot;</span>)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RISCVVirtState</span> <span class="title">RISCVVirtState</span>;</span></span><br><span class="line">DECLARE_INSTANCE_CHECKER(RISCVVirtState, RISCV_VIRT_MACHINE,</span><br><span class="line">                         TYPE_RISCV_QUARD_STAR_MACHINE)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RISCVVirtState</span> &#123;</span></span><br><span class="line">    <span class="comment">/*&lt; private &gt;*/</span></span><br><span class="line">    MachineState parent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*&lt; public &gt;*/</span></span><br><span class="line">    RISCVHartArrayState soc[QUARD_STAR_SOCKETS_MAX];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    QUARD_STAR_MROM,</span><br><span class="line">    QUARD_STAR_SRAM,</span><br><span class="line">    QUARD_STAR_UART0,</span><br><span class="line">    QUARD_STAR_DRAM,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    QUARD_STAR_UART0_IRQ = <span class="number">10</span>,  <span class="comment">//定义了串口中断号为10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="3-2-1-quard-star-c"><a href="#3-2-1-quard-star-c" class="headerlink" title="3.2.1 quard_star.c"></a>3.2.1 quard_star.c</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qemu/osdep.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qemu/units.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qemu/log.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qemu/error-report.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;qapi/error.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/boards.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/loader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/sysbus.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/qdev-properties.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/char/serial.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;target/riscv/cpu.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/riscv/riscv_hart.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/riscv/quard_star.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/riscv/boot.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;hw/riscv/numa.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;chardev/char.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sysemu/arch_init.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sysemu/device_tree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sysemu/sysemu.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> MemMapEntry virt_memmap[] = &#123;</span><br><span class="line">    [QUARD_STAR_MROM]  = &#123;        <span class="number">0x0</span>,        <span class="number">0x8000</span> &#125;,</span><br><span class="line">    [QUARD_STAR_SRAM]  = &#123;     <span class="number">0x8000</span>,        <span class="number">0x8000</span> &#125;,</span><br><span class="line">    [QUARD_STAR_UART0] = &#123; <span class="number">0x10000000</span>,         <span class="number">0x100</span> &#125;,</span><br><span class="line">    [QUARD_STAR_DRAM]  = &#123; <span class="number">0x80000000</span>,           <span class="number">0x0</span> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quard_star_setup_rom_reset_vec</span><span class="params">(MachineState *machine, RISCVHartArrayState *harts,</span></span><br><span class="line"><span class="params">                               hwaddr start_addr,</span></span><br><span class="line"><span class="params">                               hwaddr rom_base, hwaddr rom_size,</span></span><br><span class="line"><span class="params">                               <span class="type">uint64_t</span> kernel_entry,</span></span><br><span class="line"><span class="params">                               <span class="type">uint32_t</span> fdt_load_addr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> start_addr_hi32 = <span class="number">0x00000000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!riscv_is_32bit(harts)) &#123;</span><br><span class="line">        start_addr_hi32 = start_addr &gt;&gt; <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* reset vector */</span></span><br><span class="line">    <span class="type">uint32_t</span> reset_vec[<span class="number">10</span>] = &#123;</span><br><span class="line">        <span class="number">0x00000297</span>,                  <span class="comment">/* 1:  auipc  t0, %pcrel_hi(fw_dyn) */</span></span><br><span class="line">        <span class="number">0x02828613</span>,                  <span class="comment">/*     addi   a2, t0, %pcrel_lo(1b) */</span></span><br><span class="line">        <span class="number">0xf1402573</span>,                  <span class="comment">/*     csrr   a0, mhartid  */</span></span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0</span>,</span><br><span class="line">        <span class="number">0x00028067</span>,                  <span class="comment">/*     jr     t0 */</span></span><br><span class="line">        start_addr,                  <span class="comment">/* start: .dword */</span></span><br><span class="line">        start_addr_hi32,</span><br><span class="line">        fdt_load_addr,               <span class="comment">/* fdt_laddr: .dword */</span></span><br><span class="line">        <span class="number">0x00000000</span>,</span><br><span class="line">                                     <span class="comment">/* fw_dyn: */</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (riscv_is_32bit(harts)) &#123;</span><br><span class="line">        reset_vec[<span class="number">3</span>] = <span class="number">0x0202a583</span>;   <span class="comment">/*     lw     a1, 32(t0) */</span></span><br><span class="line">        reset_vec[<span class="number">4</span>] = <span class="number">0x0182a283</span>;   <span class="comment">/*     lw     t0, 24(t0) */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reset_vec[<span class="number">3</span>] = <span class="number">0x0202b583</span>;   <span class="comment">/*     ld     a1, 32(t0) */</span></span><br><span class="line">        reset_vec[<span class="number">4</span>] = <span class="number">0x0182b283</span>;   <span class="comment">/*     ld     t0, 24(t0) */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* copy in the reset vector in little_endian byte order */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; ARRAY_SIZE(reset_vec); i++) &#123;</span><br><span class="line">        reset_vec[i] = cpu_to_le32(reset_vec[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rom_add_blob_fixed_as(<span class="string">&quot;mrom.reset&quot;</span>, reset_vec, <span class="keyword">sizeof</span>(reset_vec),</span><br><span class="line">                          rom_base, &amp;address_space_memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quard_star_machine_init</span><span class="params">(MachineState *machine)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">const</span> MemMapEntry *memmap = virt_memmap;</span><br><span class="line">    RISCVVirtState *s = RISCV_VIRT_MACHINE(machine);</span><br><span class="line">    MemoryRegion *system_memory = get_system_memory();</span><br><span class="line">    MemoryRegion *main_mem = g_new(MemoryRegion, <span class="number">1</span>);</span><br><span class="line">    MemoryRegion *sram_mem = g_new(MemoryRegion, <span class="number">1</span>);</span><br><span class="line">    MemoryRegion *mask_rom = g_new(MemoryRegion, <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> i, base_hartid, hart_count;</span><br><span class="line">    <span class="type">char</span> *soc_name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (QUARD_STAR_SOCKETS_MAX &lt; riscv_socket_count(machine)) &#123;</span><br><span class="line">        error_report(<span class="string">&quot;number of sockets/nodes should be less than %d&quot;</span>,</span><br><span class="line">            QUARD_STAR_SOCKETS_MAX);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; riscv_socket_count(machine); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!riscv_socket_check_hartids(machine, i)) &#123;</span><br><span class="line">            error_report(<span class="string">&quot;discontinuous hartids in socket%d&quot;</span>, i);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        base_hartid = riscv_socket_first_hartid(machine, i);</span><br><span class="line">        <span class="keyword">if</span> (base_hartid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error_report(<span class="string">&quot;can&#x27;t find hartid base for socket%d&quot;</span>, i);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        hart_count = riscv_socket_hart_count(machine, i);</span><br><span class="line">        <span class="keyword">if</span> (hart_count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            error_report(<span class="string">&quot;can&#x27;t find hart count for socket%d&quot;</span>, i);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        soc_name = g_strdup_printf(<span class="string">&quot;soc%d&quot;</span>, i);</span><br><span class="line">        object_initialize_child(OBJECT(machine), soc_name, &amp;s-&gt;soc[i],</span><br><span class="line">                                TYPE_RISCV_HART_ARRAY);</span><br><span class="line">        g_free(soc_name);</span><br><span class="line">        object_property_set_str(OBJECT(&amp;s-&gt;soc[i]), <span class="string">&quot;cpu-type&quot;</span>,</span><br><span class="line">                                machine-&gt;cpu_type, &amp;error_abort);</span><br><span class="line">        object_property_set_int(OBJECT(&amp;s-&gt;soc[i]), <span class="string">&quot;hartid-base&quot;</span>,</span><br><span class="line">                                base_hartid, &amp;error_abort);</span><br><span class="line">        object_property_set_int(OBJECT(&amp;s-&gt;soc[i]), <span class="string">&quot;num-harts&quot;</span>,</span><br><span class="line">                                hart_count, &amp;error_abort);</span><br><span class="line">        sysbus_realize(SYS_BUS_DEVICE(&amp;s-&gt;soc[i]), &amp;error_abort);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    memory_region_init_ram(main_mem, <span class="literal">NULL</span>, <span class="string">&quot;riscv_quard_star_board.dram&quot;</span>,</span><br><span class="line">                           machine-&gt;ram_size, &amp;error_fatal);</span><br><span class="line">    memory_region_add_subregion(system_memory, memmap[QUARD_STAR_DRAM].base,</span><br><span class="line">        main_mem);</span><br><span class="line"></span><br><span class="line">    memory_region_init_ram(sram_mem, <span class="literal">NULL</span>, <span class="string">&quot;riscv_quard_star_board.sram&quot;</span>,</span><br><span class="line">                           memmap[QUARD_STAR_SRAM].size, &amp;error_fatal);</span><br><span class="line">    memory_region_add_subregion(system_memory, memmap[QUARD_STAR_SRAM].base,</span><br><span class="line">        sram_mem);</span><br><span class="line"></span><br><span class="line">    memory_region_init_rom(mask_rom, <span class="literal">NULL</span>, <span class="string">&quot;riscv_quard_star_board.mrom&quot;</span>,</span><br><span class="line">                           memmap[QUARD_STAR_MROM].size, &amp;error_fatal);</span><br><span class="line">    memory_region_add_subregion(system_memory, memmap[QUARD_STAR_MROM].base,</span><br><span class="line">                                mask_rom);</span><br><span class="line"></span><br><span class="line">    quard_star_setup_rom_reset_vec(machine, &amp;s-&gt;soc[<span class="number">0</span>], memmap[QUARD_STAR_MROM].base,</span><br><span class="line">                              virt_memmap[QUARD_STAR_MROM].base,</span><br><span class="line">                              virt_memmap[QUARD_STAR_MROM].size,</span><br><span class="line">                              <span class="number">0x0</span>, <span class="number">0x0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quard_star_machine_instance_init</span><span class="params">(Object *obj)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quard_star_machine_class_init</span><span class="params">(ObjectClass *oc, <span class="type">void</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    MachineClass *mc = MACHINE_CLASS(oc);</span><br><span class="line"></span><br><span class="line">    mc-&gt;desc = <span class="string">&quot;RISC-V Quard Star board&quot;</span>;</span><br><span class="line">    mc-&gt;init = quard_star_machine_init;</span><br><span class="line">    mc-&gt;max_cpus = QUARD_STAR_CPUS_MAX;</span><br><span class="line">    mc-&gt;default_cpu_type = TYPE_RISCV_CPU_BASE;</span><br><span class="line">    mc-&gt;pci_allow_0_address = <span class="literal">true</span>;</span><br><span class="line">    mc-&gt;possible_cpu_arch_ids = riscv_numa_possible_cpu_arch_ids;</span><br><span class="line">    mc-&gt;cpu_index_to_instance_props = riscv_numa_cpu_index_to_props;</span><br><span class="line">    mc-&gt;get_default_cpu_node_id = riscv_numa_get_default_cpu_node_id;</span><br><span class="line">    mc-&gt;numa_mem_supported = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> TypeInfo quard_star_machine_typeinfo = &#123;</span><br><span class="line">    .name       = MACHINE_TYPE_NAME(<span class="string">&quot;quard-star&quot;</span>),</span><br><span class="line">    .parent     = TYPE_MACHINE,</span><br><span class="line">    .class_init = quard_star_machine_class_init,</span><br><span class="line">    .instance_init = quard_star_machine_instance_init,</span><br><span class="line">    .instance_size = <span class="keyword">sizeof</span>(RISCVVirtState),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">quard_star_machine_init_register_types</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    type_register_static(&amp;quard_star_machine_typeinfo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type_init(quard_star_machine_init_register_types)</span><br></pre></td></tr></table></figure><h2 id="3-3-文件夹目录变更"><a href="#3-3-文件夹目录变更" class="headerlink" title="3.3 文件夹目录变更"></a>3.3 文件夹目录变更</h2><p>我原本qemu源码的目录为：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timer@DESKTOP-JI9EVEH:~/qemu/qemu-8.0.2/</span><br></pre></td></tr></table></figure><p>修改文件夹名变为如下：将最上层的qemu目录重命名为了quard_star</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timer@DESKTOP-JI9EVEH:~/quard_star/qemu-8.0.2/</span><br></pre></td></tr></table></figure><p>然后在此目录下新建一个脚本文件用于编译qemu：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> build.sh</span><br></pre></td></tr></table></figure><p><code>build.sh</code>的内容如下：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前脚本文件所在的目录</span></span><br><span class="line">SHELL_FOLDER=$(cd &quot;$(dirname &quot;$0&quot;)&quot;;pwd)</span><br><span class="line"></span><br><span class="line">cd qemu-8.0.2</span><br><span class="line">if [ ! -d &quot;$SHELL_FOLDER/output/qemu&quot; ]; then  </span><br><span class="line">./configure --prefix=$SHELL_FOLDER/output/qemu  --target-list=riscv64-softmmu --enable-gtk  --enable-virtfs --disable-gio</span><br><span class="line">fi  </span><br><span class="line">make -j16</span><br><span class="line">sudo make install</span><br><span class="line">cd ..</span><br></pre></td></tr></table></figure><ol><li><code>cd qemu-8.0.2</code>：切换到 <code>qemu-8.0.2</code> 目录下。</li><li><code>if [ ! -d &quot;$SHELL_FOLDER/output/qemu&quot; ]; then</code>：如果目录 <code>$SHELL_FOLDER/output/qemu</code> 不存在，则执行下面的命令。</li><li><code>./configure --prefix=$SHELL_FOLDER/output/qemu --target-list=riscv64-softmmu --enable-gtk --enable-virtfs --disable-gio</code>：运行 <code>configure</code> 脚本，用于配置编译参数。这里指定了安装路径为 <code>$SHELL_FOLDER/output/qemu</code>，目标平台为 <code>riscv64-softmmu</code>，开启了 GTK 支持和 VirtFS 支持，禁用了 GIO 支持。</li><li><code>fi</code>：结束条件语句的块。</li><li><code>make -j16</code>：使用并发编译，编译生成目标文件。</li><li><code>make install</code>：将编译得到的目标文件安装到系统中。</li><li><code>cd ..</code>：切换回上一级目录。</li></ol><p>执行完build脚本后，编译完成后的qemu位于output文件夹下，再创建一个脚本文件：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timer@DESKTOP-JI9EVEH:~/quard_star$ <span class="built_in">touch</span> run.sh</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/quard_star$ <span class="built_in">chmod</span> +x run.sh</span><br></pre></td></tr></table></figure><p><code>run.sh</code>的内容如下：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SHELL_FOLDER=$(<span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span>;<span class="built_in">pwd</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable">$SHELL_FOLDER</span>/output/qemu/bin/qemu-system-riscv64 \</span><br><span class="line">-M quard-star \</span><br><span class="line">-m 1G \</span><br><span class="line">-smp 8 \</span><br></pre></td></tr></table></figure><h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h2><p>运行脚本：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timer@DESKTOP-JI9EVEH:~/quard_star$ ./build.sh</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/quard_star$ ./run.sh</span><br></pre></td></tr></table></figure><p>板子启动后在qemu的monitor界面输入<code>info qtree</code>就可看见<code>quard-star</code>的硬件信息，如下：</p><p><img src="/2023/06/12/QEMU%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%80%E5%8F%91%E6%9D%BF/image-20230613213926716.png" alt="image-20230613213926716"></p>]]></content>
      
      
      
        <tags>
            
            <tag> qemu </tag>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设备树详解</title>
      <link href="/2023/06/11/%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/06/11/%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-设备树简介"><a href="#1-设备树简介" class="headerlink" title="1.设备树简介"></a>1.设备树简介</h1><p>传统上，操作系统内核会直接编译进所有支持的硬件设备的驱动程序。但是，随着硬件设备的不断增多和变化，这种方法变得不够灵活。设备树的引入解决了这个问题。设备树将硬件的描述信息以一种结构化的方式存储在单独的文件中，然后在引导过程中由操作系统内核加载和解析。</p><p>设备树文件使用一种称为”Device Tree Source”（DTS）的语言编写，它是一种人类可读的文本格式。该文件描述了硬件设备的层次结构、寄存器地址、中断线路、DMA通道和其他相关属性。这些信息对于内核来说非常重要，因为它们允许内核正确地初始化和配置硬件设备。</p><p>设备树文件经过<code>DTC</code>编译后会生成一种称为”Device Tree Blob”（DTB）的二进制格式。DTB文件在引导过程中由引导加载程序（Bootloader）提供给内核。内核会解析DTB文件，根据其中的描述信息初始化硬件设备，并加载相应的驱动程序。</p><p>设备树的作用在于用来描述一个具体的硬件平台的硬件资源，如果没有设备树，当我有一个新的硬件平台时，在移植操作系统时需要去修改源码去适配这个具体的硬件平台。有了设备树之后，bootloader就能直接从设备树中获取硬件信息，而不需要去修改源码，使得Linux内核的兼容性和可移植性大大增强。</p><ul><li><p><code>DTS：</code>Device Tree Source，<code>.dts</code>格式的文件，是一种<code>ASII </code>文本格式的设备树描述，也是我们要编写的设备树源码，一般一个<code>.dts</code>文件对应一个硬件平台，位于Linux源码的<code>/arch/***/boot/dts”</code>目录下。</p></li><li><p><code>DTC：</code>Device Tree Compiler，是指编译设备树源码的工具，一般情况下我们需要手动安装这个编译工具。</p></li><li><p><code>DTB </code>：是设备树源码编译生成的文件，类似于我们C语言中“.C”文件编译生成“.bin”文件</p></li></ul><img src="/2023/06/11/%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/1503563-20200915000144208-924995757.png" alt="Linux驱动之设备树的基础知识 - 山无言 - 博客园" style="zoom:67%;"><blockquote><p>参考链接：<a href="https://doc.embedfire.com/linux/imx6/base/zh/latest/linux_driver/driver_tree.html">doc.embedfire.com&#x2F;linux&#x2F;imx6&#x2F;base&#x2F;zh&#x2F;latest&#x2F;linux_driver&#x2F;driver_tree.html</a></p></blockquote><h1 id="2-设备树基本语法架构分析"><a href="#2-设备树基本语法架构分析" class="headerlink" title="2.设备树基本语法架构分析"></a>2.设备树基本语法架构分析</h1><h2 id="2-1-dts基本框架"><a href="#2-1-dts基本框架" class="headerlink" title="2.1 dts基本框架"></a>2.1 dts基本框架</h2><p><code>1.头文件</code>：设备树是可以像C语言那样使用“#include”引用“.h”后缀的头文件，也可以引用设备树“.dtsi”后缀的头文件。因此这里<code>k210.dts</code>引用了<code>k210.dtsi</code>中的文件</p><p><code>2.设备树节点</code>：每一个<code>&#123; &#125;</code>都是一个节点，<code>/ &#123;…&#125;</code>表示“根节点”， 在根节点内部的“aliases {…}”、“chosen {…}”、“memory {…}”等字符，都是根节点的子节点。</p><p><code>3.设备树节点追加内容</code>：向已经存在的子节点追加数据，这些已经存在的节点可能定义在<code>.dts</code>文件里，也可能定义在<code>.dtsi</code>文件里，这些节点比根节点下的子节点多了一个<code>&amp;</code>。</p><p>设备树由一个根节点和众多子节点组成，子节点也可以继续包含其他节点，也就是子节点的子节点。</p><h3 id="2-1-1节点基本格式"><a href="#2-1-1节点基本格式" class="headerlink" title="2.1.1节点基本格式"></a>2.1.1节点基本格式</h3><p>设备树中的每个节点都按照以下约定命名：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">node-name@unit-address<span class="punctuation">&#123;</span></span><br><span class="line">    属性<span class="number">1</span> = …</span><br><span class="line">    属性<span class="number">2</span> = …</span><br><span class="line">    属性<span class="number">3</span> = …</span><br><span class="line">    子节点…</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>节点格式中的<code> node-name</code> 用于指定节点的名称。 它的长度为1至31个字符，只能由如下字符组成:</p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td>0-9</td><td>数字</td></tr><tr><td>a-z</td><td>小写字母</td></tr><tr><td>A-Z</td><td>大写字母</td></tr><tr><td>,</td><td>英文逗号</td></tr><tr><td>.</td><td>英文句号</td></tr><tr><td>_</td><td>下划线</td></tr><tr><td>+</td><td>加号</td></tr><tr><td>-</td><td>减号</td></tr></tbody></table><blockquote><p>注意：根节点没有节点名，它直接使用“&#x2F;”指代这是一个根节点。</p></blockquote><p><code>@unit-address</code> ：其中的符号“@”可以理解为是一个分割符，“unit-address”用于指定“单元地址”， 它的值要和节点“reg”属性的第一个地址一致。如果节点没有“reg”属性值，可以直接省略“@unit-address”， 不过要注意这时要求同级别的设备树下（相同级别的子节点）节点名唯一,从这个侧面也可以了解到， 同级别的子节点的节点名可以相同，但是要求“单元地址”不同，node-name@unit-address 的整体要求同级唯一。</p><h3 id="2-1-2-节点标签"><a href="#2-1-2-节点标签" class="headerlink" title="2.1.2 节点标签"></a>2.1.2 节点标签</h3><p>例如：</p><pre><code>sysctl: sysctl@50440000 &#123;        compatible = &quot;kendryte,k210-sysctl&quot;, &quot;simple-mfd&quot;;        reg = &lt;0x50440000 0x1000&gt;;        #clock-cells = &lt;1&gt;;&#125;;</code></pre><p>则<code>sysctl</code>就代表了<code>sysctl@50440000</code>这个节点的标签，用<code>:</code>来指明。通常节点标签是节点名的简写，所以它的作用是当其它位置需要引用时可以使用节点标签来向该节点中追加内容。</p><h3 id="2-1-3-节点路径"><a href="#2-1-3-节点路径" class="headerlink" title="2.1.3 节点路径"></a>2.1.3 节点路径</h3><p>通过指定从根节点到所需节点的完整路径，可以唯一地标识设备树中的节点，<code>不同层次的设备树节点名字可以相同，同层次的设备树节点要唯一</code>。 这有点类似于我们Windows上的文件，一个路径唯一标识一个文件或文件夹，不同目录下的文件文件名可以相同。</p><h3 id="2-1-4-节点属性"><a href="#2-1-4-节点属性" class="headerlink" title="2.1.4 节点属性"></a>2.1.4 节点属性</h3><ul><li><p><strong>compatible属性</strong>：属性值类型：字符串</p><p>compatible属性值由一个或多个字符串组成，有多个字符串时使用“,”分隔开。设备树中的每一个代表了一个设备的节点都要有一个compatible属性。 compatible是系统用来决定绑定到设备的设备驱动的关键。 compatible属性是用来查找节点的方法之一，另外还可以通过节点名或节点路径查找指定节点。</p><p>例如：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>model属性</strong>：属性值类型：字符串</p><p>model属性用于指定设备的制造商和型号，推荐使用“制造商, 型号”的格式，当然也可以自定义。</p><p>例如：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Kendryte K210 generic&quot;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>status属性</strong></p><p>状态属性用于指示设备的“操作状态”，通过status可以去禁止设备或者启用设备，可用的操作状态如下表。默认情况下不设置status属性设备是使能的。</p><p>例如：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* External sound card */</span></span><br><span class="line"><span class="symbol">sound:</span> <span class="title class_">sound</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;disabled&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>reg属性</strong></p><p>reg属性描述设备资源在其父总线定义的地址空间内的地址。通常情况下用于表示一块内存的起始地址（偏移地址）和长度， 在特定情况下也有不同的含义。 ret属性的书写格式为reg &#x3D; &lt; cells cells cells cells cells cells…&gt;，长度根据实际情况而定， 这些数据分为地址数据（地址字段），长度数据（大小字段）</p><p>例如：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x80000000</span> <span class="number">0x400000</span>&gt;</span>,</span><br><span class="line">  <span class="params">&lt;<span class="number">0x80400000</span> <span class="number">0x200000</span>&gt;</span>,</span><br><span class="line">  <span class="params">&lt;<span class="number">0x80600000</span> <span class="number">0x200000</span>&gt;</span><span class="punctuation">;</span></span><br></pre></td></tr></table></figure><p>这里描述了三段内存：起始地址为0x80000000，大小为0x400000；起始地址为：0x80400000 ，0x200000；起始地址为：0x80600000，大小为：0x200000。每一个cells都是32位的，如果想要描述一个64位的地址，需要先设置#address-cells 和 #size-cells属性的值。</p></li><li><p><strong>#address-cells 和 #size-cells</strong></p><p>#address-cells，用于指定子节点reg属性“地址字段”所占的长度（单元格cells的个数）。</p><p> #size-cells，用于指定子节点reg属性“大小字段”所占的长度（单元格cells的个数）。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">soc &#123;</span><br><span class="line">    #address-cells = &lt;1&gt;;</span><br><span class="line">    #size-cells = &lt;1&gt;;</span><br><span class="line">    ocrams: sram@900000 &#123;</span><br><span class="line">            compatible = &quot;fsl,lpm-sram&quot;;</span><br><span class="line">            reg = &lt;0x900000 0x4000&gt;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例如当#address-cells&#x3D;2，#address-cells&#x3D;1，则reg内的数据含义为<code>reg = &lt;address address size address address size&gt;</code>，这样就可以来描述一个64位的地址了。</p></li><li><p><strong>device_type</strong></p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">cpus</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line">    <span class="meta">#size-cells = &lt;0&gt;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">    cpu0:</span> <span class="title class_">cpu@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;arm,cortex-a7&quot;</span><span class="punctuation">;</span></span><br><span class="line">        device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line">        <span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>device_type属性也是一个很少用的属性，只用在CPU和内存的节点上。 如上例中所示，device_type用在了CPU节点。</p></li><li><p><strong>ranges</strong></p></li></ul><h3 id="2-1-5-特殊节点"><a href="#2-1-5-特殊节点" class="headerlink" title="2.1.5 特殊节点"></a>2.1.5 特殊节点</h3><ul><li><code>aliases</code>子节点：aliases子节点的作用就是为其他节点起一个别名，如下所示。</li></ul><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">    can0 = <span class="variable">&amp;flexcan1</span><span class="punctuation">;</span></span><br><span class="line">    can1 = <span class="variable">&amp;flexcan2</span><span class="punctuation">;</span></span><br><span class="line">    ethernet0 = <span class="variable">&amp;fec1</span><span class="punctuation">;</span></span><br><span class="line">    ethernet1 = <span class="variable">&amp;fec2</span><span class="punctuation">;</span></span><br><span class="line">    gpio0 = <span class="variable">&amp;gpio1</span><span class="punctuation">;</span></span><br><span class="line">    gpio1 = <span class="variable">&amp;gpio2</span><span class="punctuation">;</span></span><br><span class="line">    gpio2 = <span class="variable">&amp;gpio3</span><span class="punctuation">;</span></span><br><span class="line">    gpio3 = <span class="variable">&amp;gpio4</span><span class="punctuation">;</span></span><br><span class="line">    gpio4 = <span class="variable">&amp;gpio5</span><span class="punctuation">;</span></span><br><span class="line">    i2c0 = <span class="variable">&amp;i2c1</span><span class="punctuation">;</span></span><br><span class="line">    i2c1 = <span class="variable">&amp;i2c2</span><span class="punctuation">;</span></span><br><span class="line">    <span class="comment">/*----------- 以下省略------------*/</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>以“can0 &#x3D; &amp;flexcan1;”为例。“flexcan1”是一个节点的名字， 设置别名后我们可以使用“can0”来指代flexcan1节点，与节点标签类似。 在设备树中更多的是为节点添加标签，没有使用节点别名，别名的作用是“快速找到设备树节点”。 在驱动中如果要查找一个节点，通常情况下我们可以使用“节点路径”一步步找到节点。 也可以使用别名“一步到位”找到节点。</p><ul><li><code>chosen子节点</code>：chosen子节点位于根节点下，如下所示</li></ul><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">stdout-path</span> <span class="operator">=</span> <span class="variable">&amp;uart1</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>chosen子节点不代表实际硬件，它主要用于给内核传递参数。 这里只设置了“stdout-path &#x3D;&amp;uart1;”一条属性，表示系统标准输出stdout使用串口uart1。 此外这个节点还用作uboot向linux内核传递配置参数的“通道”， 我们在Uboot中设置的参数就是通过这个节点传递到内核的， 这部分内容是uboot和内核自动完成的。</p><h1 id="3-Linux内核中K210设备树分析"><a href="#3-Linux内核中K210设备树分析" class="headerlink" title="3.Linux内核中K210设备树分析"></a>3.Linux内核中K210设备树分析</h1><p>从Linux 5.7 开始，Linux内核开始支持国产 RISC-V 芯片 K210，在本地的linux5.10版本中的<code>/arch/riscv/boot/dts</code>文件夹中可以找到kendryte的K210设备树文件，我们以此为例子，来分析设备树的语法与语义</p><p><img src="/2023/06/11/%E8%AE%BE%E5%A4%87%E6%A0%91%E8%AF%A6%E8%A7%A3/image-20230611222950267.png" alt="image-20230611222950267"></p><h2 id="3-1-k210-dts分析"><a href="#3-1-k210-dts分析" class="headerlink" title="3.1 k210.dts分析"></a>3.1 k210.dts分析</h2><p>其中<code>k210.dts</code>的文件如下：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;k210.dtsi&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">//设置节点基本属性</span></span><br><span class="line"><span class="attr">model</span> <span class="operator">=</span> <span class="string">&quot;Kendryte K210 generic&quot;</span><span class="punctuation">;</span>  <span class="comment">//指定为嘉楠的K210</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span><span class="punctuation">;</span>     <span class="comment">//设置compatible属性</span></span><br><span class="line"><span class="comment">// 设置chosen特殊节点，</span></span><br><span class="line"><span class="title class_">chosen</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">bootargs</span> <span class="operator">=</span> <span class="string">&quot;earlycon console=ttySIF0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">stdout-path</span> <span class="operator">=</span> <span class="string">&quot;serial0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">&amp;uarths0</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">status</span> <span class="operator">=</span> <span class="string">&quot;okay&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li>第一行：引用头文件，<code>k210.dts</code>引用了<code>k210.dtsi</code>中的文件</li><li>3~12行：k210的根节点，每一个设备树只有一个根节点。 如果打开<code>k210.dtsi</code>文件可以发现它也有一个根节点，虽然<code>k210.dts</code>引用了<code>k210.dtsi</code>文件， 但这并不代表设备树有两个根节点，因为不同文件的根节点最终会合并为一个。<ul><li><code>bootargs = &quot;earlycon console=ttySIF0&quot;;</code> 是 “chosen” 节点的属性之一。它用于指定系统引导过程中传递给内核的启动参数（boot arguments）。在这里，设置的启动参数是 “earlycon console&#x3D;ttySIF0”，表示使用早期控制台（early console）并将其输出重定向到名为 “ttySIF0” 的串口设备。</li><li><code>stdout-path = &quot;serial0&quot;;</code> 是 “chosen” 节点的另一个属性。它用于指定标准输出（stdout）的路径。在这里，标准输出被设置为名为 “serial0” 的设备。</li></ul></li><li>13~15行：设备树增加内容。向<code>uarths0</code>子节点添加了一个属性，<code>status = &quot;okay&quot;;</code> 在这里，状态被设置为 “okay”，表示<code>uarths0</code>设备节点处于可用状态，可以正常使用。</li></ul><h2 id="3-2-k210-dtsi分析"><a href="#3-2-k210-dtsi分析" class="headerlink" title="3.2 k210.dtsi分析"></a>3.2 k210.dtsi分析</h2><h3 id="3-2-1-根节点"><a href="#3-2-1-根节点" class="headerlink" title="3.2.1 根节点"></a>3.2.1 根节点</h3><p><code>k210.dtsi</code>的文件如下：</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dt-bindings/clock/k210-clk.h&gt;</span></span></span><br><span class="line"><span class="title class_">/</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Although the K210 is a 64-bit CPU, the address bus is only 32-bits</span></span><br><span class="line"><span class="comment"> * wide, and the upper half of all addresses is ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">serial0 = <span class="variable">&amp;uarths0</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The K210 has an sv39 MMU following the priviledge specification v1.9.</span></span><br><span class="line"><span class="comment"> * Since this is a non-ratified draft specification, the kernel does not</span></span><br><span class="line"><span class="comment"> * support it and the K210 support enabled only for the !MMU case.</span></span><br><span class="line"><span class="comment"> * Be consistent with this by setting the CPUs MMU type to &quot;none&quot;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">cpus</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="meta">#size-cells = &lt;0&gt;;</span></span><br><span class="line"><span class="attr">timebase-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">7800000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">cpu0:</span> <span class="title class_">cpu@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span>, <span class="string">&quot;sifive,rocket0&quot;</span>, <span class="string">&quot;riscv&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">riscv,isa</span> <span class="operator">=</span> <span class="string">&quot;rv64imafdc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">mmu-type</span> <span class="operator">=</span> <span class="string">&quot;none&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;sysctl</span> K210_CLK_CPU&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">390000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">cpu0_intc:</span> <span class="title class_">interrupt-controller</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#interrupt-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">interrupt-controller</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;riscv,cpu-intc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">cpu1:</span> <span class="title class_">cpu@1</span> <span class="punctuation">&#123;</span></span><br><span class="line">device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span>, <span class="string">&quot;sifive,rocket0&quot;</span>, <span class="string">&quot;riscv&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">riscv,isa</span> <span class="operator">=</span> <span class="string">&quot;rv64imafdc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">mmu-type</span> <span class="operator">=</span> <span class="string">&quot;none&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;sysctl</span> K210_CLK_CPU&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">390000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">cpu1_intc:</span> <span class="title class_">interrupt-controller</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#interrupt-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">interrupt-controller</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;riscv,cpu-intc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sram:</span> <span class="title class_">memory@80000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;memory&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x80000000</span> <span class="number">0x400000</span>&gt;</span>,</span><br><span class="line">      <span class="params">&lt;<span class="number">0x80400000</span> <span class="number">0x200000</span>&gt;</span>,</span><br><span class="line">      <span class="params">&lt;<span class="number">0x80600000</span> <span class="number">0x200000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg-names</span> <span class="operator">=</span> <span class="string">&quot;sram0&quot;</span>, <span class="string">&quot;sram1&quot;</span>, <span class="string">&quot;aisram&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">clocks</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">in0:</span> <span class="title class_">oscillator</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-clock&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="meta">#clock-cells = &lt;0&gt;;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">soc</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210-soc&quot;</span>, <span class="string">&quot;simple-bus&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">ranges</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">interrupt-parent</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;plic0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">sysctl:</span> <span class="title class_">sysctl@50440000</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210-sysctl&quot;</span>, <span class="string">&quot;simple-mfd&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x50440000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="meta">#clock-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">clint0:</span> <span class="title class_">clint@2000000</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#interrupt-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;riscv,clint0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x2000000</span> <span class="number">0xC000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">interrupts-extended</span> <span class="operator">=</span>  <span class="params">&lt;<span class="variable">&amp;cpu0_intc</span> <span class="number">3</span> <span class="variable">&amp;cpu0_intc</span> <span class="number">7</span></span></span><br><span class="line"><span class="params"><span class="variable">&amp;cpu1_intc</span> <span class="number">3</span> <span class="variable">&amp;cpu1_intc</span> <span class="number">7</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;sysctl</span> K210_CLK_ACLK&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">plic0:</span> <span class="title class_">interrupt-controller@c000000</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#interrupt-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">interrupt-controller</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210-plic0&quot;</span>, <span class="string">&quot;riscv,plic0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0xC000000</span> <span class="number">0x4000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">interrupts-extended</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;cpu0_intc</span> <span class="number">11</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;cpu0_intc</span> <span class="number">0xffffffff</span>&gt;</span>,</span><br><span class="line">      <span class="params">&lt;<span class="variable">&amp;cpu1_intc</span> <span class="number">11</span>&gt;</span>, <span class="params">&lt;<span class="variable">&amp;cpu1_intc</span> <span class="number">0xffffffff</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">riscv,ndev</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">65</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">riscv,max-priority</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">7</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol"></span></span><br><span class="line"><span class="symbol">uarths0:</span> <span class="title class_">serial@38000000</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210-uarths&quot;</span>, <span class="string">&quot;sifive,uart0&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x38000000</span> <span class="number">0x1000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">interrupts</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">33</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;sysctl</span> K210_CLK_CPU&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>在第一行中包含了一个c语言中的头文件<code>#include &lt;dt-bindings/clock/k210-clk.h&gt;</code>，这个文件位于<code>linux-5.10.99/include/dt-bindings/clock</code>下，打开此文件如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> K210_CLK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K210_CLK_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Arbitrary identifiers for clocks.</span></span><br><span class="line"><span class="comment"> * The structure is: in0 -&gt; pll0 -&gt; aclk -&gt; cpu</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Since we use the hardware defaults for now, set all these to the same clock.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K210_CLK_PLL0   0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K210_CLK_PLL1   0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K210_CLK_ACLK   0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> K210_CLK_CPU    0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* K210_CLK_H */</span></span></span><br></pre></td></tr></table></figure><p>可以看到，只是定义了一些宏定义，后续可能用到</p><p><code>7~13</code>行</p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta">#address-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="meta">#size-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span><span class="punctuation">;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">aliases</span> <span class="punctuation">&#123;</span></span><br><span class="line">serial0 = <span class="variable">&amp;uarths0</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><code>#address-cells = &lt;1&gt;;</code> 指定了设备树中地址单元的数量，这里设置为 1。</li><li><code>#size-cells = &lt;1&gt;;</code> 指定了设备树中大小单元的数量，这里也设置为 1。</li><li><code>compatible = &quot;kendryte,k210&quot;;</code> 表示设备树描述的硬件与 Kendryte K210 SoC 兼容。这个属性用于标识设备树所描述的硬件平台或设备的兼容性。</li><li><code>aliases</code>：定义了一个别名 <code>serial0</code>，它指向名为 <code>uarths0</code> 的设备。</li></ul><h3 id="3-2-2-cpu节点"><a href="#3-2-2-cpu节点" class="headerlink" title="3.2.2 cpu节点"></a>3.2.2 cpu节点</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">cpus</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#address-cells = &lt;1&gt;;    <span class="comment">// 地址单元为1</span></span></span><br><span class="line"><span class="meta">#size-cells = &lt;0&gt;;        <span class="comment">// 大小单元为0</span></span></span><br><span class="line"><span class="attr">timebase-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">7800000</span>&gt;</span><span class="punctuation">;</span>  <span class="comment">//指定cpu时钟基准频率7800000hz</span></span><br><span class="line"><span class="symbol">cpu0:</span> <span class="title class_">cpu@0</span> <span class="punctuation">&#123;</span></span><br><span class="line">device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span>, <span class="string">&quot;sifive,rocket0&quot;</span>, <span class="string">&quot;riscv&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">riscv,isa</span> <span class="operator">=</span> <span class="string">&quot;rv64imafdc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">mmu-type</span> <span class="operator">=</span> <span class="string">&quot;none&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;sysctl</span> K210_CLK_CPU&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">390000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">cpu0_intc:</span> <span class="title class_">interrupt-controller</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#interrupt-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">interrupt-controller</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;riscv,cpu-intc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="symbol">cpu1:</span> <span class="title class_">cpu@1</span> <span class="punctuation">&#123;</span></span><br><span class="line">device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;cpu&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">1</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;kendryte,k210&quot;</span>, <span class="string">&quot;sifive,rocket0&quot;</span>, <span class="string">&quot;riscv&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">riscv,isa</span> <span class="operator">=</span> <span class="string">&quot;rv64imafdc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">mmu-type</span> <span class="operator">=</span> <span class="string">&quot;none&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">i-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x8000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">d-cache-block-size</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">64</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clocks</span> <span class="operator">=</span> <span class="params">&lt;<span class="variable">&amp;sysctl</span> K210_CLK_CPU&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">390000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="symbol">cpu1_intc:</span> <span class="title class_">interrupt-controller</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="meta">#interrupt-cells = &lt;1&gt;;</span></span><br><span class="line"><span class="attr">interrupt-controller</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;riscv,cpu-intc&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>cpu单元定义了两个核心分别为cpu0和cpu1，两个cpu核心的配置差不都，下面依次描述一下具体描述了哪些信息，这里以cpu0为例子：</p><ul><li><p>device_type &#x3D; “cpu”：表示此节点为cpu。</p></li><li><p>reg &#x3D; &lt;0&gt;：标明这是0号处理器。</p></li><li><p>compatible &#x3D; “kendryte,k210”, “sifive,rocket0”, “riscv”：指定cpu的标识。</p></li><li><p>riscv,isa &#x3D; “rv64imafdc”：表明该cpu为rv64imafdc架构。</p></li><li><p>mmu-type &#x3D; “none”：cpu不启用mmu，未开启虚拟内存功能。</p></li><li><p>i-cache-size &#x3D; &lt;0x8000&gt;：指令缓存的大小为 0x8000，即 32768 字节（或 32 KB）。</p></li><li><p>i-cache-block-size &#x3D; &lt;64&gt;：指令缓存的块大小为 64 字节。</p></li><li><p>d-cache-size &#x3D; &lt;0x8000&gt;：数据缓存（Data Cache）的大小为 0x8000，即 32768 字节（或 32 KB）。</p></li><li><p>d-cache-block-size &#x3D; &lt;64&gt;：数据缓存的块大小为 64 字节。</p></li><li><p>clocks &#x3D; &lt;&amp;sysctl K210_CLK_CPU&gt;：指向设备树中名为 <code>sysctl</code> 的节点， <code>sysctl</code> 定义在下面的<code>soc</code>节点中,并使用 K210_CLK_CPU 作为其子节点，K210_CLK_CPU这个宏定义在<code>k210-clk.h</code>中，值为：0。表明cpu0的时钟是 <code>sysctl</code> 节点中的0号子时钟</p></li><li><p>clock-frequency &#x3D; &lt;390000000&gt;：指定时钟的频率为390MHZ</p></li><li><p>cpu0_intc：中断控制器节点，用于处理与 CPU 0 相关的中断。</p><ul><li><code>#interrupt-cells = &lt;1&gt;</code>：指定了中断单元的数量，即中断号码的位数。在这种情况下，每个中断使用一个单元（一个整数值）来表示。</li><li><code>interrupt-controller</code>：表示该节点是中断控制器。</li><li><code>compatible = &quot;riscv,cpu-intc&quot;</code>：指定了该中断控制器节点与 RISC-V 架构的 CPU 中断控制器兼容。</li></ul></li></ul><h3 id="3-2-3-SRAM节点"><a href="#3-2-3-SRAM节点" class="headerlink" title="3.2.3 SRAM节点"></a>3.2.3 SRAM节点</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">sram:</span> <span class="title class_">memory@80000000</span> <span class="punctuation">&#123;</span></span><br><span class="line">device_<span class="attr">type</span> <span class="operator">=</span> <span class="string">&quot;memory&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">0x80000000</span> <span class="number">0x400000</span>&gt;</span>,</span><br><span class="line">      <span class="params">&lt;<span class="number">0x80400000</span> <span class="number">0x200000</span>&gt;</span>,</span><br><span class="line">      <span class="params">&lt;<span class="number">0x80600000</span> <span class="number">0x200000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="attr">reg-names</span> <span class="operator">=</span> <span class="string">&quot;sram0&quot;</span>, <span class="string">&quot;sram1&quot;</span>, <span class="string">&quot;aisram&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><ul><li><code>memory@80000000</code>：指定了 SRAM 的基地址为 <code>0x80000000</code>。</li><li><code>device_type = &quot;memory&quot;</code>：指定了设备类型为内存。</li><li><code>reg</code>：指定了 SRAM 的物理地址范围。在这种情况下，SRAM 被划分为三个连续的地址范围：<ul><li><code>&lt;0x80000000 0x400000&gt;</code>：<code>sram0</code> 的地址范围为从 <code>0x80000000</code> 到 <code>0x803FFFFF</code>，大小为 4 MB。</li><li><code>&lt;0x80400000 0x200000&gt;</code>：<code>sram1</code> 的地址范围为从 <code>0x80400000</code> 到 <code>0x805FFFFF</code>，大小为 2 MB。</li><li><code>&lt;0x80600000 0x200000&gt;</code>：<code>aisram</code> 的地址范围为从 <code>0x80600000</code> 到 <code>0x807FFFFF</code>，大小为 2 MB。</li></ul></li><li><code>reg-names = &quot;sram0&quot;, &quot;sram1&quot;, &quot;aisram&quot;</code>：指定了对应于每个地址范围的名称</li></ul><h3 id="3-2-4-clocks节点"><a href="#3-2-4-clocks节点" class="headerlink" title="3.2.4 clocks节点"></a>3.2.4 clocks节点</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="title class_">clocks</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">in0:</span> <span class="title class_">oscillator</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">compatible</span> <span class="operator">=</span> <span class="string">&quot;fixed-clock&quot;</span><span class="punctuation">;</span></span><br><span class="line"><span class="meta">#clock-cells = &lt;0&gt;;</span></span><br><span class="line"><span class="attr">clock-frequency</span> <span class="operator">=</span> <span class="params">&lt;<span class="number">26000000</span>&gt;</span><span class="punctuation">;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br><span class="line"><span class="punctuation">&#125;;</span></span><br></pre></td></tr></table></figure><p>该设备树中的 <code>clocks</code> 节点定义了一个名为 <code>in0</code> 的时钟，具体如下：</p><ul><li><code>in0</code>：时钟的名称为 <code>in0</code>。</li><li><code>oscillator</code>：指定了该时钟源为一个振荡器。</li><li><code>compatible = &quot;fixed-clock&quot;</code>：指定了时钟的类型为固定频率时钟。</li><li><code>#clock-cells = &lt;0&gt;</code>：表示该时钟节点不需要附加的时钟单元属性。</li><li><code>clock-frequency = &lt;26000000&gt;</code>：指定了时钟的频率为 26 MHz。</li></ul><h3 id="3-2-5-soc节点"><a href="#3-2-5-soc节点" class="headerlink" title="3.2.5 soc节点"></a>3.2.5 soc节点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">soc &#123;</span><br><span class="line">#address-cells = &lt;1&gt;;</span><br><span class="line">#size-cells = &lt;1&gt;;</span><br><span class="line">compatible = &quot;kendryte,k210-soc&quot;, &quot;simple-bus&quot;;</span><br><span class="line">ranges;  //省略ranges属性，不存在地址映射</span><br><span class="line">interrupt-parent = &lt;&amp;plic0&gt;;   </span><br><span class="line"></span><br><span class="line">sysctl: sysctl@50440000 &#123;</span><br><span class="line">compatible = &quot;kendryte,k210-sysctl&quot;, &quot;simple-mfd&quot;;</span><br><span class="line">reg = &lt;0x50440000 0x1000&gt;;</span><br><span class="line">#clock-cells = &lt;1&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">clint0: clint@2000000 &#123;</span><br><span class="line">#interrupt-cells = &lt;1&gt;;</span><br><span class="line">compatible = &quot;riscv,clint0&quot;;</span><br><span class="line">reg = &lt;0x2000000 0xC000&gt;;</span><br><span class="line">interrupts-extended =  &lt;&amp;cpu0_intc 3 &amp;cpu0_intc 7</span><br><span class="line">&amp;cpu1_intc 3 &amp;cpu1_intc 7&gt;;</span><br><span class="line">clocks = &lt;&amp;sysctl K210_CLK_ACLK&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">plic0: interrupt-controller@c000000 &#123;</span><br><span class="line">#interrupt-cells = &lt;1&gt;;</span><br><span class="line">interrupt-controller;</span><br><span class="line">compatible = &quot;kendryte,k210-plic0&quot;, &quot;riscv,plic0&quot;;</span><br><span class="line">reg = &lt;0xC000000 0x4000000&gt;;</span><br><span class="line">interrupts-extended = &lt;&amp;cpu0_intc 11&gt;, &lt;&amp;cpu0_intc 0xffffffff&gt;,</span><br><span class="line">      &lt;&amp;cpu1_intc 11&gt;, &lt;&amp;cpu1_intc 0xffffffff&gt;;</span><br><span class="line">riscv,ndev = &lt;65&gt;;</span><br><span class="line">riscv,max-priority = &lt;7&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">uarths0: serial@38000000 &#123;</span><br><span class="line">compatible = &quot;kendryte,k210-uarths&quot;, &quot;sifive,uart0&quot;;</span><br><span class="line">reg = &lt;0x38000000 0x1000&gt;;</span><br><span class="line">interrupts = &lt;33&gt;;</span><br><span class="line">clocks = &lt;&amp;sysctl K210_CLK_CPU&gt;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><p><code>interrupt-parent = &lt;&amp;plic0&gt;</code>：指定了中断控制器的父节点，这里使用的是 plic0 中断控制器的引用。</p></li><li><p><code>sysctl: sysctl@50440000</code>：这是一个子节点，描述了系统控制器 (sysctl)。它有以下属性：</p><ul><li><code>compatible = &quot;kendryte,k210-sysctl&quot;, &quot;simple-mfd&quot;</code>：指定了系统控制器的兼容性标识符，表示该节点描述的是 Kendryte K210 SoC 的系统控制器，并且它是一个多功能设备。</li><li><code>reg = &lt;0x50440000 0x1000&gt;</code>：指定了系统控制器在内存中的地址范围。</li><li><code>#clock-cells = &lt;1&gt;</code>：指定了该节点使用的时钟单元数。</li></ul></li><li><p><code>clint0: clint@2000000</code>：这是另一个子节点，描述了 CLINT (Core Local Interruptor)。它有以下属性：</p><ul><li><code>compatible = &quot;riscv,clint0&quot;</code>：指定了 CLINT 的兼容性标识符。</li><li><code>reg = &lt;0x2000000 0xC000&gt;</code>：指定了 CLINT 在内存中的地址范围。</li><li><code>interrupts-extended</code>：指定了 CLINT 支持的中断引脚，这里使用的是 <code>cpu0_intc</code> 和 <code>cpu1_intc</code> 的引用。</li><li><code>clocks = &lt;&amp;sysctl K210_CLK_ACLK&gt;</code>：指定了 CLINT 使用的时钟源，这里使用的是 <code>sysctl</code> 节点中的 <code>K210_CLK_ACLK</code> 时钟。</li></ul></li><li><p><code>plic0: interrupt-controller@c000000</code>：这是另一个子节点，描述了 PLIC (Platform-Level Interrupt Controller)。它有以下属性：</p><ul><li><code>compatible = &quot;kendryte,k210-plic0&quot;, &quot;riscv,plic0&quot;</code>：指定了 PLIC 的兼容性标识符。</li><li><code>reg = &lt;0xC000000 0x4000000&gt;</code>：指定了 PLIC 在内存中的地址范围。</li><li><code>interrupts-extended</code>：指定了 PLIC 支持的中断引脚，这里使用的是 <code>cpu0_intc</code> 和 <code>cpu1_intc</code> 的引用。</li><li><code>riscv,ndev = &lt;65&gt;</code>：指定了 PLIC 支持的设备数量。</li><li><code>riscv,max-priority = &lt;7&gt;</code>：指定了 PLIC 支持的最大优先级</li></ul></li><li><p><code>uarths0: serial@38000000</code>：这是串口设备的节点定义，名称为 <code>uarths0</code>，描述了串口在内存中的地址范围。</p><ul><li><code>compatible = &quot;kendryte,k210-uarths&quot;, &quot;sifive,uart0&quot;</code>：指定了串口设备的兼容性标识符，表示该节点描述的是 Kendryte K210 SoC 的 <code>uarths0</code> 串口，并且它兼容 SiFive 的 UART0 设备。</li><li><code>reg = &lt;0x38000000 0x1000&gt;</code>：指定了串口设备在内存中的地址范围。</li><li><code>interrupts = &lt;33&gt;</code>：指定了串口设备的中断引脚，这里使用的是中断号 33。</li><li><code>clocks = &lt;&amp;sysctl K210_CLK_CPU&gt;</code>：指定了串口设备使用的时钟源，这里使用的是 <code>sysctl</code> 节点中的 <code>K210_CLK_CPU</code> 时钟。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 嵌入式Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
            <tag> 设备树 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从源码构建Qemu</title>
      <link href="/2023/06/11/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAQemu/"/>
      <url>/2023/06/11/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAQemu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Qemu介绍"><a href="#1-Qemu介绍" class="headerlink" title="1.Qemu介绍"></a>1.Qemu介绍</h1><p>QEMU（Quick Emulator）是一个开源的虚拟化软件，它可以模拟多个硬件平台，包括处理器和外设，从而允许在一个平台上运行多个不同的操作系统。QEMU可以运行在多个主机平台上，包括Linux、Windows、macOS等。</p><p>QEMU的主要功能是模拟一个完整的计算机系统，包括处理器、内存、存储器、网络接口等，它可以将客户操作系统（例如Linux、Windows等）当作应用程序运行在主机操作系统之上，从而实现虚拟化。QEMU还支持通过二进制代码转换的方式实现虚拟化加速，例如使用KVM（Kernel-based Virtual Machine）模块加速虚拟机的运行。</p><p>QEMU可以用于多种用途，包括：</p><ol><li>系统仿真：可以模拟不同的处理器架构（如x86、ARM等）来运行和测试操作系统和应用程序，方便开发人员进行交叉平台开发和调试。</li><li>虚拟机：可以在一个物理机上运行多个虚拟机实例，每个虚拟机可以运行不同的操作系统，实现资源的隔离和共享，提供虚拟化环境。</li><li>可移植性：QEMU可以将一个操作系统或应用程序打包成一个虚拟机镜像，这个镜像可以在不同的平台上运行，提供了一种便携式的软件分发方式。</li></ol><blockquote><p>官方源码地址：<a href="https://github.com/qemu/qemu">Qemu的github源码</a></p><p>官网地址：<a href="https://www.qemu.org/">QEMU</a></p><p>qemu的文档地址：<a href="https://www.qemu.org/docs/master/">Welcome to QEMU’s documentation! — QEMU documentation</a></p></blockquote><h1 id="2-源码下载"><a href="#2-源码下载" class="headerlink" title="2.源码下载"></a>2.源码下载</h1><p>在笔者下载源码的时间，目前<code>qemu</code>的版本已经更新到了<code>8.0.2</code>，我的ubuntu环境为：<code>WSL2 ubuntu20.04.05</code></p><p><img src="/2023/06/11/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAQemu/image-20230611160604923.png" alt="image-20230611160604923"></p><p>安装所需编译环境：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install ninja-build pkg-config libglib2.0-dev libpixman-1-dev libgtk-3-dev libcap-ng-dev libattr1-dev libsdl2-dev device-tree-compiler bison flex gperf intltool mtd-utils libslirp-dev</span><br></pre></td></tr></table></figure><p>源码下载与编译：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timer@DESKTOP-JI9EVEH:~$ <span class="built_in">mkdir</span> qemu</span><br><span class="line">timer@DESKTOP-JI9EVEH:~$ <span class="built_in">cd</span> qemu/</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/qemu$ wget https://download.qemu.org/qemu-8.0.2.tar.xz</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/qemu$ tar xvJf qemu-8.0.2.tar.xz</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/qemu$ <span class="built_in">cd</span> qemu-8.0.2/</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/qemu/qemu-8.0.2$ ./configure</span><br><span class="line">timer@DESKTOP-JI9EVEH:~/qemu/qemu-8.0.2$ make -j8</span><br></pre></td></tr></table></figure><p>编译完成后会生成一个<code>./build</code>目录：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">timer@DESKTOP-JI9EVEH:~/qemu/qemu-8.0.2$ <span class="built_in">cd</span> build/</span><br></pre></td></tr></table></figure><p>安装：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#由于我之前使用package的方式在本地安装了一个qemu，因此先将其卸载</span></span><br><span class="line">timer@DESKTOP-JI9EVEH:~$ sudo apt-get remove --auto-remove qemu-system-x86</span><br><span class="line">timer@DESKTOP-JI9EVEH:~$ sudo apt-get purge --auto-remove qemu-system-x86</span><br><span class="line"><span class="comment">#卸载完成后进入build目录执行安装命令，需要sudo不然会报错</span></span><br><span class="line">timer@DESKTOP-JI9EVEH:~/qemu/qemu-8.0.2/build$ sudo make install</span><br></pre></td></tr></table></figure><p>测试，查看<code>qemu</code>版本号，</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">qemu-img -V</span><br></pre></td></tr></table></figure><p><img src="/2023/06/11/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAQemu/image-20230611164450596.png" alt="image-20230611164450596"></p><p>启动qemu，这里以riscv64为例：<code>qemu-system-riscv64</code></p><p><img src="/2023/06/11/%E4%BB%8E%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BAQemu/image-20230611164621585.png" alt="image-20230611164621585"></p><p>大功告成！</p>]]></content>
      
      
      <categories>
          
          <category> Qemu&amp;虚拟化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qemu </tag>
            
            <tag> 虚拟化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-3.实模式</title>
      <link href="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3-%E5%AE%9E%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3-%E5%AE%9E%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-X86cpu工作原理"><a href="#1-X86cpu工作原理" class="headerlink" title="1. X86cpu工作原理"></a>1. X86cpu工作原理</h2><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3-%E5%AE%9E%E6%A8%A1%E5%BC%8F/image-20230611121633671.png" alt="image-20230611121633671"></p><p>程序计数器<code>PC</code>存储了下一条要运行的指定的地址，在x86cpu上，<code>PC</code>就是：<code>cs：ip</code>，控制单元读取<code>ip</code>寄存器中的地址后，将此地址送上地址总线，<code>cpu</code>由此得到了要执行的指令，然后将指令存入指令寄存器<code>IR</code>中。下一步指令译码器将此指令解码，解码后得到了操作数和操作码，于是操作控制器<code>OC</code>就给运算单元下令，运算单元就开始执行指令。<code>ip</code>寄存器的值被加上当前指令的大小，由此循环。</p><p>IA32的指令格式如下：</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3-%E5%AE%9E%E6%A8%A1%E5%BC%8F/image-20230611123557111.png" alt="image-20230611123557111"></p><h2 id="2-实模式的寻址"><a href="#2-实模式的寻址" class="headerlink" title="2. 实模式的寻址"></a>2. 实模式的寻址</h2><p>8086的地址总线是20位宽，意味着寻址范围为：<code>2^20=1MB</code>，但内部寄存器都是16位的，若采用单一寄存器来寻址只能访问：<code>2^16=64KB</code>空间。</p><p>为了解决16位寄存器不能寻址20位的问题，因此通过先把16位的段基址左移四位变成20位后，在加上段内偏移地址，这样就形成了20位地址，只要保证了段基址是20位的，偏移地址是多少位就不用关心了。</p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3-%E5%AE%9E%E6%A8%A1%E5%BC%8F/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU3RyaXZlIGZvciB0aGUgYmVzdO-8gQ==,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="3.操作系统——CPU的实模式、保护模式和长模式_Strive for the best！的博客-CSDN博客" style="zoom: 50%;"><p>下面列举一下寻址实例：所有的利用寄存器寻址的方式，每个寄存器都有对应的段基址，寄存器的默认段基址见上一章</p><ol><li><p>直接寻址（Direct addressing）：</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> AX, [<span class="number">0x1234</span>]</span><br><span class="line"><span class="keyword">mov</span> ax, [fs:<span class="number">0x5678</span>]</span><br></pre></td></tr></table></figure><p>0x1234是段内偏移地址，默认的段地址是DS，这一条指令是将内存地址<code>DS:0x1234</code>处的值写入<code>ax</code>寄存器。</p><p>第二条指定显示指定段基址为<code>fs</code>,因此是将内存地址<code>FS:0x5678</code>处的值写入<code>ax</code>寄存器。</p><p>注意：段基址都需要先左移4位再与段内偏移相加</p></li><li><p>基址寻址（Base addressing）：</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">MOV</span> AX, [BX + <span class="number">0x10</span>]</span><br></pre></td></tr></table></figure><p>这个例子中，将从BX寄存器所指定的内存地址加上偏移量0x10处读取一个字（16位）的数据，并将其存储在AX寄存器中。bx默认的段寄存器为DS，因此实际的寻址地址为：<code>DS:bx+0x10</code></p></li></ol><h2 id="3-栈的布局"><a href="#3-栈的布局" class="headerlink" title="3.栈的布局"></a>3.栈的布局</h2><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-3-%E5%AE%9E%E6%A8%A1%E5%BC%8F/image-20230611131141910.png" alt="image-20230611131141910"></p><p>栈空间也是内存中一段区域，我们程序员可以自由分配，SS栈段寄存器左移4位指向栈底，栈的生长是向低地址方向发展，sp指向了栈顶。</p><p>在进行函数调用时，例如使用call指令，需要将PC压栈，然后跳转。</p>]]></content>
      
      
      <categories>
          
          <category> 从零手写操作系统-X86架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-2.X86寄存器详解</title>
      <link href="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.X86%E5%AF%84%E5%AD%98%E5%99%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.X86%E5%AF%84%E5%AD%98%E5%99%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是寄存器"><a href="#1-什么是寄存器" class="headerlink" title="1.什么是寄存器"></a>1.什么是寄存器</h1><p>寄存器是CPU内部用来存放数据的一些小型存储区域，用来暂时存放参与运算的数据和运算结果以及一些CPU运行需要的信息</p><p>x86架构CPU走的是<code>复杂指令集（CISC）</code> 路线，提供了丰富的指令来实现强大的功能，与此同时也提供了大量寄存器来辅助功能实现。寄存器分为两类，一类对程序员不可见，这一类寄存器用于支撑CPU内部运行，程序员无法操作。一类对程序员可见，在进行汇编编写程序时，能够直接操作。</p><ul><li>通用寄存器：<code>EAX、EBX、ECX、EDX、ESI、EDI、ESP、EBP</code></li><li>标志寄存器：<code>EFLAGS</code></li><li>指令寄存器：<code>EIP</code></li><li>段寄存器：<code>CS、DS、ES、FS、GS、SS</code></li><li>控制寄存器：<code>CR0、CR1、CR2、CR3、CR4</code></li><li>调试寄存器：<code>DR0、DR1、DR2、DR3、DR4、DR5、DR6、DR7</code></li><li>描述符寄存器：<code>GDTR、IDTR、LDTR、TR</code></li></ul><h1 id="2-实模式下寄存器（16bit）"><a href="#2-实模式下寄存器（16bit）" class="headerlink" title="2.实模式下寄存器（16bit）"></a>2.实模式下寄存器（16bit）</h1><p>在x86架构下，实模式可以使用的通用寄存器有 <code>AX、BX、CX、DX、SI、DI、BP</code> 和 <code>SP</code>。这些寄存器都是16位的，可以分为两个8位的寄存器来使用。</p><p>此外，还有一些特殊用途的寄存器，包括：</p><ul><li><code>IP</code>（指令指针寄存器）：保存当前执行的指令地址。</li><li><code>CS</code>（代码段寄存器）：保存代码段的起始地址。</li><li><code>DS</code>（数据段寄存器）：保存数据段的起始地址。</li><li><code>ES</code>（附加段寄存器）：附加数据段的起始地址。</li><li><code>GS</code>（附加段寄存器）：附加数据段的起始地址。</li><li><code>FS</code>（附加段寄存器）：附加数据段的起始地址。</li><li><code>SS</code>（堆栈段寄存器）：保存堆栈段的起始地址。</li><li><code>FLAGS</code>（标志寄存器）：包含各种标志位，如零标志、进位标志、符号标志等</li></ul><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.X86%E5%AF%84%E5%AD%98%E5%99%A8%E8%AF%A6%E8%A7%A3/image-20230611122704382.png" alt="image-20230611122704382"></p><p>其中<code>FS</code>,<code>GS</code>附加段寄存器是在32位CPU中增加的，但是在32位CPU中在实模式下同样可以使用，因为32位CPU兼容16位CPU的特性。</p><table><thead><tr><th>16位寄存器</th><th>功能</th><th>高8位</th><th>低8位</th></tr></thead><tbody><tr><td><code>AX</code></td><td>累加寄存器，常用于算术运算，保存与外设输入输出的数据</td><td><code>AH</code></td><td><code>AL</code></td></tr><tr><td><code>CX</code></td><td>计数寄存器，常用于循环指令中的循环次数</td><td><code>CH</code></td><td><code>CL</code></td></tr><tr><td><code>DX</code></td><td>数据寄存器，通常情况下只用于保存外设控制器的端口号地址</td><td><code>DH</code></td><td><code>DL</code></td></tr><tr><td><code>BX</code></td><td>基址寄存器，来存储内存地址，段基址为DS</td><td><code>BH</code></td><td><code>BL</code></td></tr><tr><td><code>SP</code></td><td>栈指针寄存器，段基址为SS，用来指向栈顶</td><td></td><td></td></tr><tr><td><code>BP</code></td><td>栈帧的基址寄存器，段基址为SS</td><td></td><td></td></tr><tr><td><code>SI</code></td><td>源变址寄存器，存储数据源地址,段基址为DS</td><td></td><td></td></tr><tr><td><code>DI</code></td><td>目的变址寄存器，存储数据目的地址,段基址为DS</td><td></td><td></td></tr></tbody></table><blockquote><p>BP指向栈底，SP指向栈顶，两者共同维护了栈空间。<code>push</code> 和 <code>pop</code> 可更改<code>SP</code>的值,<code>sp</code>指针的值会自动更新</p></blockquote><h2 id="2-1-寄存器用法举例"><a href="#2-1-寄存器用法举例" class="headerlink" title="2.1 寄存器用法举例"></a>2.1 寄存器用法举例</h2><ul><li><p><code>SI、DI</code></p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">mov</span> ecx, <span class="number">10</span>  <span class="comment">; 设置循环计数为10</span></span><br><span class="line">    <span class="keyword">mov</span> esi, <span class="number">0</span>  <span class="comment">; 设置SI寄存器为0作为初始值</span></span><br><span class="line">    <span class="keyword">mov</span> edi, <span class="number">100</span>  <span class="comment">; 设置DI寄存器为100作为初始值</span></span><br><span class="line">    </span><br><span class="line"><span class="symbol">loop_start:</span></span><br><span class="line">    <span class="keyword">mov</span> eax, [esi]  <span class="comment">; 从源地址(SI)读取数据到EAX寄存器</span></span><br><span class="line">    <span class="keyword">mov</span> [edi], eax  <span class="comment">; 将数据存储到目的地址(DI)</span></span><br><span class="line">    <span class="keyword">add</span> esi, <span class="number">4</span>  <span class="comment">; 增加SI的值，以便读取下一个双字</span></span><br><span class="line">    <span class="keyword">add</span> edi, <span class="number">4</span>  <span class="comment">; 增加DI的值，以便存储到下一个地址</span></span><br><span class="line">    loop loop_start  <span class="comment">; 循环，减少ECX计数，直到为零</span></span><br></pre></td></tr></table></figure><p>在这个例子中，SI和DI寄存器用作源地址和目的地址。循环从源地址读取数据，然后将其存储到目的地址，然后递增SI和DI以访问下一个元素。通过loop指令和ECX计数器，循环执行直到计数为零。</p></li><li><p><code>BP、SP</code></p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">push</span> ebp         <span class="comment">; 保存当前函数的旧的基址到堆栈中</span></span><br><span class="line"><span class="keyword">mov</span> ebp, esp     <span class="comment">; 将当前堆栈指针存储到基址指针寄存器BP中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">sub</span> esp, <span class="number">16</span>      <span class="comment">; 分配16字节的局部变量空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> dword ptr [ebp<span class="number">-4</span>], <span class="number">10</span>   <span class="comment">; 将值10存储到基址指针寄存器BP-4指向的位置（局部变量）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> eax, dword ptr [ebp<span class="number">-4</span>]  <span class="comment">; 从基址指针寄存器BP-4指向的位置读取值到EAX寄存器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">add</span> esp, <span class="number">16</span>      <span class="comment">; 释放局部变量空间</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pop</span> ebp          <span class="comment">; 恢复旧的基址到基址指针寄存器BP中</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="3-保护模式下寄存器（32bit）"><a href="#3-保护模式下寄存器（32bit）" class="headerlink" title="3.保护模式下寄存器（32bit）"></a>3.保护模式下寄存器（32bit）</h1><p>在32位保护模式下，x86架构提供了更多的通用寄存器以及扩展功能。以下是32位保护模式下可以使用的寄存器：</p><ol><li>通用寄存器（General Purpose Registers）：<ul><li><code>EAX</code>：累加器寄存器（Accumulator Register）。</li><li><code>EBX</code>：基址寄存器（Base Register）。</li><li><code>ECX</code>：计数寄存器（Counter Register）。</li><li><code>EDX</code>：数据寄存器（Data Register）。</li><li><code>ESI</code>：源索引寄存器（Source Index Register）。</li><li><code>EDI</code>：目的索引寄存器（Destination Index Register）。</li><li><code>EBP</code>：基址指针寄存器（Base Pointer Register）。</li><li><code>ESP</code>：堆栈指针寄存器（Stack Pointer Register）。</li></ul></li><li>扩展通用寄存器：<ul><li><code>EIP</code>：指令指针寄存器（Instruction Pointer Register）。</li><li><code>EFLAGS</code>：标志寄存器（Flags Register），用于存储各种标志位，如零标志、进位标志、符号标志等。</li></ul></li><li>段寄存器（Segment Registers）：<ul><li><code>CS</code>：代码段寄存器（Code Segment Register）。</li><li><code>DS</code>：数据段寄存器（Data Segment Register）。</li><li><code>ES</code>：附加段寄存器（Extra Segment Register）。</li><li><code>FS、GS、SS</code>：附加段寄存器，用于访问额外的数据段。</li></ul></li><li>控制寄存器（Control Registers）：<ul><li><code>CR0、CR2、CR3、CR4</code>：用于控制和管理保护模式的特性，如分页机制、特权级等。</li></ul></li><li>段描述符寄存器（Descriptor Registers）：<ul><li><code>GDTR</code>：全局描述符表寄存器（Global Descriptor Table Register）。</li><li><code>IDTR</code>：中断描述符表寄存器（Interrupt Descriptor Table Register）。</li><li><code>LDTR</code>：局部描述符表寄存器（Local Descriptor Table Register）。</li><li><code>TR</code>：任务寄存器（Task Register）。</li></ul></li></ol><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.X86%E5%AF%84%E5%AD%98%E5%99%A8%E8%AF%A6%E8%A7%A3/image-20230128173803324.png" alt="image-20230128173803324" style="zoom: 80%;"><h2 id="3-1-CR0寄存器"><a href="#3-1-CR0寄存器" class="headerlink" title="3.1 CR0寄存器"></a>3.1 <code>CR0</code>寄存器</h2><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.X86%E5%AF%84%E5%AD%98%E5%99%A8%E8%AF%A6%E8%A7%A3/image-20230609214128132.png" alt="image-20230609214128132"></p><ul><li><p><code>PE: Protection Enble </code></p><p>当此位为0，代表在CPU处在实模式，此位为1，表示CPU处在保护模式；从实模式切换到保护模式时需要将此位置为1.</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta">#进入保护模式</span></span><br><span class="line"><span class="keyword">mov</span> eax, cr0</span><br><span class="line"><span class="keyword">or</span> eax, <span class="number">0x00000001</span></span><br><span class="line"><span class="keyword">mov</span> cr0, eax</span><br></pre></td></tr></table></figure></li><li><p><code>TS：Task Switched</code></p></li><li><p><code>WP：Write Protect</code></p><p>对于Intel 80486或以上的CPU，CR0的位16是写保护（Write Proctect）标志。当设置该标志时，处理器会禁止超级用户程序（例如特权级0的程序）向用户级只读页面执行写操作；当该位复位时则反之。该标志有利于UNIX类操作系统在创建进程时实现写时复制（Copy on Write）技术。</p></li><li><p><code>AM：Alignment Mask</code></p></li><li><p><code>NW：Not Writethrough</code></p></li><li><p><code>CD：Cache Disable</code></p></li><li><p><code>PG：Paging</code></p><p>是否启动分页机制的位，只有在保护模式以上才能开启分页机制。PG位为1开启分页机制，PG位为0关闭分页机制</p></li></ul><p>在CPU刚上电时，处理器被复位成PE&#x3D;0,PG&#x3D;0。</p><h2 id="3-2-CR2寄存器"><a href="#3-2-CR2寄存器" class="headerlink" title="3.2 CR2寄存器"></a>3.2 <code>CR2</code>寄存器</h2><h2 id="3-3-CR3寄存器"><a href="#3-3-CR3寄存器" class="headerlink" title="3.3 CR3寄存器"></a>3.3 <code>CR3</code>寄存器</h2><h2 id="3-4-CR4寄存器"><a href="#3-4-CR4寄存器" class="headerlink" title="3.4 CR4寄存器"></a>3.4 <code>CR4</code>寄存器</h2><h2 id="3-5-EFLAGS寄存器"><a href="#3-5-EFLAGS寄存器" class="headerlink" title="3.5 EFLAGS寄存器"></a>3.5 <code>EFLAGS</code>寄存器</h2><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-2.X86%E5%AF%84%E5%AD%98%E5%99%A8%E8%AF%A6%E8%A7%A3/image-20230611124419683.png" alt="image-20230611124419683"></p><ul><li>CF：进位标志</li><li>PF：奇偶位标志</li><li>AF：辅助进位标志</li><li>ZF：零标志位</li><li>SF：符号标注位</li><li>TF：陷阱标志位</li><li>IF：中断标志位。若IF为1，表示中断开启；若为0，表示中断关闭</li><li>DF：方向标志位。</li><li>OF：溢出标志位。</li><li>IOPL：特权级标志位，占2个bit，标志了4个特权级</li><li>NT：任务嵌套标志位</li><li>RF：恢复标志位</li><li>VM：虚拟8086模式</li><li>AC：对齐检查</li><li>VIF：虚拟中断标志位</li><li>VIP：虚拟中断挂起标志位</li><li>ID：识别标志位</li><li>22~31：没有实际用途，占位用，为了将来拓展</li></ul><h1 id="4-长模式下寄存器（64bit）"><a href="#4-长模式下寄存器（64bit）" class="headerlink" title="4.长模式下寄存器（64bit）"></a>4.长模式下寄存器（64bit）</h1><p>在长模式下，也称为64位保护模式（64-bit Protected Mode）或x86-64架构，x86处理器提供了更广泛的寄存器集合。以下是长模式下可以使用的寄存器：</p><ol><li>通用寄存器（General Purpose Registers）：<ul><li><code>RAX</code>：累加器寄存器（Accumulator Register）。</li><li><code>RBX</code>：基址寄存器（Base Register）。</li><li><code>RCX</code>：计数寄存器（Counter Register）。</li><li><code>RDX</code>：数据寄存器（Data Register）。</li><li><code>RSI</code>：源索引寄存器（Source Index Register）。</li><li><code>RDI</code>：目的索引寄存器（Destination Index Register）。</li><li><code>RBP</code>：基址指针寄存器（Base Pointer Register）。</li><li><code>RSP</code>：堆栈指针寄存器（Stack Pointer Register）。</li><li><code>R8-R15</code>：扩展的通用寄存器。</li></ul></li><li>扩展通用寄存器：<ul><li><code>RIP</code>：指令指针寄存器（Instruction Pointer Register）。</li><li><code>RFLAGS</code>：标志寄存器（Flags Register），包含各种标志位。</li></ul></li><li>段寄存器（Segment Registers）：<ul><li><code>CS</code>：代码段寄存器（Code Segment Register）。</li><li><code>DS</code>：数据段寄存器（Data Segment Register）。</li><li><code>ES</code>：附加段寄存器（Extra Segment Register）。</li><li><code>FS、GS、SS</code>：附加段寄存器，用于访问额外的数据段。</li></ul></li><li>控制寄存器（Control Registers）：<ul><li><code>CR0、CR2、CR3、CR4、CR8</code>：用于控制和管理保护模式的特性，如分页机制、特权级等。</li></ul></li><li>段描述符寄存器（Descriptor Registers）：<ul><li><code>GDTR</code>：全局描述符表寄存器（Global Descriptor Table Register）。</li><li><code>IDTR</code>：中断描述符表寄存器（Interrupt Descriptor Table Register）。</li><li><code>LDTR</code>：局部描述符表寄存器（Local Descriptor Table Register）。</li><li><code>TR</code>：任务寄存器（Task Register）。</li></ul></li><li>XMM寄存器（SSE寄存器）：<ul><li><code>XMM0-XMM15</code>：128位的向量寄存器，用于执行SSE（Streaming SIMD Extensions）指令集中的向量运算。</li></ul></li><li>YMM寄存器（AVX寄存器）：<ul><li><code>YMM0-YMM15</code>：256位的向量寄存器，用于执行AVX（Advanced Vector Extensions）指令集中的向量运算。</li></ul></li><li>ZMM寄存器（AVX-512寄存器）：<ul><li><code>ZMM0-ZMM31</code>：512位的向量寄存器，用于执行AVX-512指令集中的向量运算。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 从零手写操作系统-X86架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-1.概述</title>
      <link href="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><ul><li><p>开发环境：</p><ul><li><code>ubuntu20.04.5 WSL</code></li><li><code>sudo apt install nasm</code>: 安装汇编编译器 nasm</li><li><code>sudo apt install bochs-x</code>: 安装虚拟机 bochs</li><li><code>sudo apt-get install qemu-system</code> ：下载安装可以模拟全部硬件的qemu</li><li><code>sudo apt install gdb</code> ：安装gdb调试器</li><li><code>sudo apt-get install gcc-multilib</code>&amp;&amp;<code>sudo apt-get install g++-multilib</code>： 安装在64位的机器上产生32位的程序</li></ul></li><li><p>参考书籍:</p><ul><li>操作系统真相还原</li><li>30天自制操作系统</li><li>Orange’S:一个操作系统的实现</li></ul></li></ul><blockquote><p>源码地址：<a href="https://github.com/yanglianoo/Onix">yanglianoo&#x2F;Onix: 基于X86的操作系统，C语言 (github.com)</a></p></blockquote><h2 id="2-操作系统大纲"><a href="#2-操作系统大纲" class="headerlink" title="2.操作系统大纲"></a>2.操作系统大纲</h2><ul><li>系统引导<ul><li>自写bootloader</li><li>grub 引导</li></ul></li><li>硬件及驱动<ul><li>CPU : 32位X86架构</li><li>显示器：VGA</li><li>中断控制器：8259A</li><li>键盘</li><li>硬盘</li><li>时钟：内部时钟，外部时钟</li><li>网卡</li></ul></li><li>任务调度：内核进程，用户态线程</li><li>中断系统：外部中断、软中断、异常</li><li>内存管理</li><li>文件系统</li><li>系统调用</li><li>shell</li><li>网络</li></ul><h2 id="3-计算机组成概述"><a href="#3-计算机组成概述" class="headerlink" title="3.计算机组成概述"></a>3.计算机组成概述</h2><p>通常，计算机由以下几部分组成：</p><ul><li>负责计算和处理数据的 CPU</li><li>负责存储程序和数据的存储器</li><li>和外部进行数据交换的 I&#x2F;O（Input&#x2F;Output，输入输出装置）。</li></ul><p>各部分<code>通过总线连接</code>就构成了一台计算机</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.001-16862005447604.png" alt="img"></p><p>CPU在运行程序的逻辑如下：</p><ul><li><p><code>1.将磁盘上的程序加载到内存中</code></p></li><li><p><code>2.读取内存中的指令</code></p><p>首先，CPU 要把即将执行的指令从内存中读取出来。CPU 中有个 PC（Program Counter，程序计数器）寄存器，其中保存着即将执行的指令的地址。指令的读取是通过将 PC 寄存器的值输出给内存，由内存返回该值对应地址中的指令</p></li><li><p><code>3.对指令进行解码</code></p><p>然后，CPU 对读取的指令所对应的操作进行解码。指令有很多种，有进行各种运算的指令、控制下一条命令的指令、对内存和 I&#x2F;O 进行读写的指令，还有对 CPU 进行控制的指令。这些指令由 CPU 中被称为指令解码器的模块进行解码。可以用来保存地址和运算结果的寄存器称为通用寄存器（General Purpose Register）</p></li><li><p><code>4.执行指令</code></p><p>最后，CPU 对解码器确定的操作进行处理。CPU 可以从内部存储装置——寄存器或外部的内存读取数据并处理，然后将结果写回寄存器或内存。</p></li></ul><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.004.png" alt="img"></p><p>CPU 执行的指令，由代表操作种类的<code>操作码</code>和代表操作对象的<code>操作数</code>两部分组成。指令本身用特定的二进制序列来表示，这种二进制序列称为机器语言。</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.005.png" alt="img"></p><blockquote><p>操作数：通常为寄存器地址、内存地址、立即数等</p><p>操作码：对应为cpu具体的操作，如加法、减法等</p></blockquote><p>根据执行的指令的特征，CPU 分为 <code>RISC</code>（Reduced Instruction Set Computer，精简指令集计算机）和 <code>CISC</code>（Complex Instruction Set Computer，复杂指令集计算机）两种</p><h3 id="3-1-内存和地址"><a href="#3-1-内存和地址" class="headerlink" title="3.1 内存和地址"></a>3.1 内存和地址</h3><p>所有能够存储数据的存储器都可称为内存，内存是用来存放运行时指令（程序）和数据的存储器。</p><p>我们一般说的电脑的内存条为DRAM，就是用来保存<code>程序运行</code>时的指令和数据。像固态硬盘、机械硬盘等存储介质也可用于存储指令和数据，但由于其访问速度实在是太慢，因此适用于计算机<code>长期保存数据和程序</code>的存储器。</p><p>内存使用地址的概念来管理存储的数据。地址表示的是数据存储的位置，如同数据的住所一样。每个数据单元都有一个地址。大多情况下数据单元是一个字节（8 位）长度。这种方式称为字节编址。</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.006.png" alt="img"></p><p>如上图，CPU可通过总线寻址找到内存空间每个数据单元，并从中取出每个数据单元存储的数据。</p><p>内存等存储器的特点是速度越快成本越高。因此通常使用“高速小容量”、“中速中等容量”到“低速大容量”等多种存储器组合的混合型架构。这种构造称为存储器层级。</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.007.png" alt="img"></p><p>在存储层面，速度最快的是 CPU 中的寄存器。CPU 比内存速度快很多，由 CPU 直 接访问内存效率较低。为了提高内存访问速度，在 CPU 和内存间增加了被称为缓存的高速小容量存储器。</p><p>缓存可以暂时性地缓冲存储从内存中读取的数据。CPU 在访问内存时，如果需要的数据已经保存在缓存中，则可直接从缓存中读取，以提高访问效率。根据容量和速度的不同，缓存也分为多个层级，通常为一级缓存、二级缓存等多个级别</p><h3 id="3-2-IO"><a href="#3-2-IO" class="headerlink" title="3.2 IO"></a>3.2 IO</h3><p>I&#x2F;O（Input&#x2F;Output）是进行数据输入输出的装置。计算机通过 I&#x2F;O 和外部实现数据交换。计算机的处理操作按照从外部读取数据、在内部处理数据、再向外部输出结果的顺序进行。以个人电脑为例，如下图所示，它从鼠标或键盘输入数据，处理器根据程序处理数据，通过显示器等向外部输出结果。</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.009.png" alt="img"></p><p>访问 I&#x2F;O 的方式大致分为<code>存储器映射 I/O</code> 和<code>端口映射 I/O </code>两种。</p><ul><li><code>存储器映射 I/O</code> :存储器映射 I&#x2F;O 方式中，I&#x2F;O 也和内存一样使用地址进行管理，可以和访问内存一样的方式进行访问</li></ul><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.010.png" alt="img"></p><ul><li><code>端口映射访问</code>:端口映射 I&#x2F;O 方式中，CPU 含有支持访问 I&#x2F;O 的专用指令。</li></ul><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.011.png" alt="img"></p><h3 id="3-3-字节序"><a href="#3-3-字节序" class="headerlink" title="3.3 字节序"></a>3.3 字节序</h3><p>将多字节数据存储在内存中时，各字节的存储顺序称为字节序。比如，将 4 字节数据 0x12345678 放入内存时，地址 0 中放 0x12、地址 1 中放 0x34、地址 2 中放 0x56、地址 3 中放 0x78 的方式，称为大端序。相对地，地址 0 中放 0x78、地址 1 中放 0x56、地址 2 中放 0x34、地址 3 中放 0x12 的方式，称为小端序。不同CPU采用的字节序不尽相同</p><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.008.png" alt="img"></p><h3 id="3-4-总线"><a href="#3-4-总线" class="headerlink" title="3.4 总线"></a>3.4 总线</h3><p>总线是 CPU、内存和 I&#x2F;O 之间交换数据的共同通道。总线将一根信号线在多个模块间共享进行通信。</p><blockquote><p>个人理解：总线用于CPU寻址，不同的外设都会有一个地址，CPU通过总线去找到对应的外设。</p></blockquote><p><img src="/2023/06/08/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-1.%E6%A6%82%E8%BF%B0/08.1.2.012.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 从零手写操作系统-X86架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写STL之Vector</title>
      <link href="/2023/06/07/%E6%89%8B%E5%86%99STL-Vector/"/>
      <url>/2023/06/07/%E6%89%8B%E5%86%99STL-Vector/</url>
      
        <content type="html"><![CDATA[<blockquote><p>代码仓库：<a href="https://github.com/yanglianoo/My_STL/tree/timer">yanglianoo&#x2F;My_STL at timer (github.com)</a></p></blockquote><h2 id="1-Vector-概述"><a href="#1-Vector-概述" class="headerlink" title="1.Vector 概述"></a>1.Vector 概述</h2><p>在C++ STL（标准模板库）中，<code>vector</code> 是一个动态数组容器，它是一个模板类具有以下特性：</p><ol><li><strong>动态大小</strong>: <code>vector</code> 的大小可以根据需要动态增长或缩小。它可以自动调整内部存储空间，以适应容器中元素的数量。</li><li><strong>连续存储</strong>: <code>vector</code> 中的元素在内存中是连续存储的，这使得对元素的随机访问变得高效。</li><li><strong>快速插入和删除</strong>: 在 <code>vector</code> 的末尾插入或删除元素是高效的，时间复杂度为常数。但在中间或开头插入或删除元素的操作可能会导致元素的移动，时间复杂度为线性。</li><li><strong>随机访问</strong>: <code>vector</code> 支持通过索引进行随机访问。可以使用下标运算符 <code>[]</code> 或 <code>at()</code> 函数来访问特定位置的元素。</li><li><strong>动态调整内存</strong>: 当 <code>vector</code> 的大小超过当前分配的内存空间时，它会重新分配更大的内存块，并将现有元素移动到新的内存中。这可以确保容器始终具有足够的内存来存储元素。</li><li><strong>元素访问</strong>: 可以使用迭代器来遍历 <code>vector</code> 中的元素。可以使用 <code>begin()</code> 和 <code>end()</code> 成员函数获取指向容器开头和结尾的迭代器。</li><li><strong>容器操作</strong>: <code>vector</code> 支持许多常见的容器操作，如排序、查找、插入和删除元素。它还提供了与其他容器兼容的接口，例如迭代器、范围构造函数和算法函数。</li></ol><p><code>STL</code>库中<code>vector</code>的定义如下:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="keyword">class</span> <span class="title class_">T</span>,<span class="keyword">class</span> <span class="title class_">Allocator</span> = std::allocator&lt;T&gt;&gt; </span><br><span class="line">    <span class="keyword">class</span> vector;</span><br></pre></td></tr></table></figure><table><thead><tr><th>T</th><th>元素的类型。<code>T</code> 必须满足<a href="https://zh.cppreference.com/w/cpp/named_req/CopyAssignable"><em>可复制赋值</em> <em>(CopyAssignable)</em> </a>和<a href="https://zh.cppreference.com/w/cpp/named_req/CopyConstructible"><em>可复制构造</em> <em>(CopyConstructible)</em> </a>的要求。</th></tr></thead></table><table><thead><tr><th>Allocator</th><th>用于获取&#x2F;释放内存及构造&#x2F;析构内存中元素的分配器。类型必须满足<a href="https://zh.cppreference.com/w/cpp/named_req/Allocator"><em>分配器</em> <em>(Allocator)</em> </a>的要求。</th></tr></thead></table><table><thead><tr><th>成员函数</th><th></th></tr></thead><tbody><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/vector">(构造函数)</a></td><td>构造 <code>vector</code> (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/~vector">(析构函数)</a></td><td>析构 <code>vector</code> (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/operator%3D">operator&#x3D;</a></td><td>赋值给容器 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/assign">assign</a></td><td>将值赋给容器 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/get_allocator">get_allocator</a></td><td>返回相关的分配器 (公开成员函数)</td></tr><tr><td>元素访问</td><td></td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/at">at</a></td><td>访问指定的元素，同时进行越界检查 (公开成员函数)</td></tr><tr><td>operator[]</td><td>访问指定的元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/front">front</a></td><td>访问第一个元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/back">back</a></td><td>访问最后一个元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/data">data</a></td><td>直接访问底层数组 (公开成员函数)</td></tr><tr><td>迭代器</td><td></td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/begin">begincbegin</a>(C++11)</td><td>返回指向起始的迭代器 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/end">endcend</a>(C++11)</td><td>返回指向末尾的迭代器 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/rbegin">rbegincrbegin</a>(C++11)</td><td>返回指向起始的逆向迭代器 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/rend">rendcrend</a>(C++11)</td><td>返回指向末尾的逆向迭代器 (公开成员函数)</td></tr><tr><td>容量</td><td></td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/empty">empty</a></td><td>检查容器是否为空 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/size">size</a></td><td>返回容纳的元素数 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/max_size">max_size</a></td><td>返回可容纳的最大元素数 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/reserve">reserve</a></td><td>预留存储空间 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/capacity">capacity</a></td><td>返回当前存储空间能够容纳的元素数 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/shrink_to_fit">shrink_to_fit</a></td><td>通过释放未使用的内存减少内存的使用 (公开成员函数)</td></tr><tr><td>修改器</td><td></td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/clear">clear</a></td><td>清除内容 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/insert">insert</a></td><td>插入元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/emplace">emplace</a>(C++11)</td><td>原位构造元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/erase">erase</a></td><td>擦除元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/push_back">push_back</a></td><td>将元素添加到容器末尾 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/emplace_back">emplace_back</a>(C++11)</td><td>在容器末尾就地构造元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/pop_back">pop_back</a></td><td>移除末元素 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/resize">resize</a></td><td>改变容器中可存储元素的个数 (公开成员函数)</td></tr><tr><td><a href="https://zh.cppreference.com/w/cpp/container/vector/swap">swap</a></td><td>交换内容</td></tr></tbody></table><blockquote><p>参考链接: <a href="https://zh.cppreference.com/w/cpp/container/vector">std::vector - cppreference.com</a></p></blockquote><h2 id="2-构造Vector"><a href="#2-构造Vector" class="headerlink" title="2.构造Vector"></a>2.构造Vector</h2><p>自己手写<code>vector</code>时，迭代器不是通用的<code>Allocator</code>类型，需要在<code>vector</code>内部实现一个自定义的迭代器</p><p>vector模板类定义如下，需要维护三个私有的成员变量</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">vector</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> _size;    <span class="comment">//实际数组大小</span></span><br><span class="line">    <span class="type">int</span> _capacity;<span class="comment">//最大容量</span></span><br><span class="line">    T* _elem;     <span class="comment">//数据区指针  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：模板类的实现和声明不能分离编译，因此最好将模板类的声明和实现都放在头文件中<br>参考链接：<a href="https://blog.csdn.net/u011201045/article/details/38679417">(64条消息) C++中模板类的编译过程_c++模板编译_jiazhucai的博客-CSDN博客</a></p></blockquote><h3 id="2-1构造函数"><a href="#2-1构造函数" class="headerlink" title="2.1构造函数"></a>2.1构造函数</h3><p>构造函数定义：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>();   <span class="comment">//默认构造函数</span></span><br><span class="line"><span class="built_in">vector</span>(std::initiallizer_list&lt;T&gt; init) <span class="comment">// c++11 列表初始化</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="type">const</span> vector&lt;T&gt;&amp; other); <span class="comment">//用另外一个vector来构造</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="type">const</span> vector&lt;T&gt;&amp; other,<span class="type">int</span> left,<span class="type">int</span> right); <span class="comment">//用另外一个vector区间构造</span></span><br><span class="line"><span class="built_in">vector</span>(<span class="type">size_t</span> count, T&amp; value); <span class="comment">//初始化为count个 value</span></span><br></pre></td></tr></table></figure><h4 id="2-1-1-辅助函数"><a href="#2-1-1-辅助函数" class="headerlink" title="2.1.1 辅助函数"></a>2.1.1 辅助函数</h4><p>在定义构造函数具体实现时需要定义几个辅助函数:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">()</span></span>; <span class="comment">//空间不足时扩容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shrink</span><span class="params">()</span></span>; <span class="comment">//装填因子过小时压缩</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">copyFrom</span> <span class="params">( T <span class="type">const</span>* A, <span class="type">int</span> left, <span class="type">int</span> right )</span></span>; <span class="comment">//复制数组区间 A[left, right]</span></span><br></pre></td></tr></table></figure><ul><li>内存扩充函数<code>expand()</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEFAULT_CAPACITY 3 </span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">expand</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(_size &lt;= _capacity) <span class="keyword">return</span>;  <span class="comment">//当size 小于等于 capacity 时 不需要扩容</span></span><br><span class="line">    <span class="keyword">if</span>(_capacity &lt; DEFAULT_CAPACITY) _capacity = DEFAULT_CAPACITY; <span class="comment">//当capacity小于最小大小，更改capacity为最小大小</span></span><br><span class="line">    <span class="comment">/* 反复翻倍，直到 _capacity &gt; _size*/</span></span><br><span class="line">    <span class="keyword">while</span> (_capacity &lt; _size)</span><br><span class="line">    &#123;</span><br><span class="line">        _capacity *=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T* old_data = _data;</span><br><span class="line">    _data = <span class="keyword">new</span> T[_capacity &lt;&lt; <span class="number">1</span>];  <span class="comment">//capacity 增大一倍，重新 new 内存</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;_size; i++)       <span class="comment">//赋值</span></span><br><span class="line">    &#123;</span><br><span class="line">        _data[i] = old_data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] old_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内存缩小函数<code>shrink()</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">shrink</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_capacity &lt; DEFAULT_CAPACITY &lt;&lt; <span class="number">1</span>) <span class="keyword">return</span>; <span class="comment">//不致收缩倒DEFAULT_CAPACITY以下</span></span><br><span class="line">    <span class="keyword">if</span>(_size &lt;&lt; <span class="number">2</span> &gt; _capacity) <span class="keyword">return</span>;  <span class="comment">//以 25% 为边界</span></span><br><span class="line"></span><br><span class="line">    T* old_data = _data;</span><br><span class="line">    _data = <span class="keyword">new</span> T[_capacity &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; _size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[i] = old_data[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>[] old_data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>区间复制函数<code>copyFrom ( T const* A, int left, int right )</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">copyFrom</span> ( T <span class="type">const</span>* A, <span class="type">int</span> left, <span class="type">int</span> right )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_data != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _data;</span><br><span class="line">        _data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _capacity = (right - left) * <span class="number">2</span>;</span><br><span class="line">    _size = <span class="number">0</span>;</span><br><span class="line">    _data = <span class="keyword">new</span> T[_capacity];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[_size] = A[left];</span><br><span class="line">        _size++;</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-构造函数实现"><a href="#2-2-2-构造函数实现" class="headerlink" title="2.2.2 构造函数实现"></a>2.2.2 构造函数实现</h4><ul><li><code>vector()</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*构造函数*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>():_data(<span class="literal">nullptr</span>),_capacity(<span class="number">0</span>),_size(<span class="number">0</span>)&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><code>vector(const vector&lt;T&gt;&amp; *other*)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>(<span class="type">const</span> vector&lt;T&gt;&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">copyFrom</span>(other._data,<span class="number">0</span>,other._size); <span class="comment">//直接调用 copyFrom 函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>vector(std::initializer_list&lt;T&gt; *init*)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* c++11 列表初始化 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>(std::initializer_list&lt;T&gt; init)</span><br><span class="line">&#123;</span><br><span class="line">    _size = init.<span class="built_in">size</span>();</span><br><span class="line">    _capacity = _size * <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    _data = <span class="keyword">new</span> T[_capacity];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp; elem : init)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[i++] = elem;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>vector(int *count*, T&amp; *value*)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::<span class="built_in">vector</span>(<span class="type">size_t</span> count, T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    _size = count;</span><br><span class="line">    _capacity = <span class="number">2</span> * _size;</span><br><span class="line">    _data = <span class="keyword">new</span> T[_capacity];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i =<span class="number">0</span>; i&lt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-析构函数"><a href="#2-2-析构函数" class="headerlink" title="2.2 析构函数"></a>2.2 析构函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 析构函数 */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;::~<span class="built_in">vector</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_data != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _data;</span><br><span class="line">        _data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _size = <span class="number">0</span>;</span><br><span class="line">    _capacity = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-赋值"><a href="#3-赋值" class="headerlink" title="3.赋值"></a>3.赋值</h2><p>实现的成员函数如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>: <span class="comment">//成员函数</span></span><br><span class="line">    vector&amp; <span class="keyword">operator</span>=(<span class="type">const</span> vector&amp; other);</span><br><span class="line">    vector&amp; <span class="keyword">operator</span>=( std::initializer_list&lt;T&gt; ilist );</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(<span class="type">size_t</span> count,<span class="type">const</span> T&amp; value)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">assign</span><span class="params">(std::initializer_list&lt;T&gt; ilist )</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>vector&amp; operator=(const vector&amp; other)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;&amp; vector&lt;T&gt;::<span class="keyword">operator</span>=(<span class="type">const</span> vector&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">copyFrom</span>(other._data,<span class="number">0</span>,other._size);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>vector&lt;T&gt;::operator=( std::initializer_list&lt;T&gt; *ilist* )</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">vector&lt;T&gt;&amp; vector&lt;T&gt;::<span class="keyword">operator</span>=( std::initializer_list&lt;T&gt; ilist )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_data != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] _data;</span><br><span class="line">        _data = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _size = init.<span class="built_in">size</span>();</span><br><span class="line">    _capacity = _size * <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    _data = <span class="keyword">new</span> T[_capacity];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> <span class="keyword">auto</span> &amp; elem : init)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[i++] = elem;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-元素访问"><a href="#4-元素访问" class="headerlink" title="4.元素访问"></a>4.元素访问</h2><p>元素访问的接口有如下这些：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>: <span class="comment">//元素访问</span></span><br><span class="line">    <span class="function">T&amp; <span class="title">at</span><span class="params">(<span class="type">size_t</span> index)</span></span>;</span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="type">size_t</span> index);</span><br><span class="line">    <span class="function">T&amp; <span class="title">front</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T&amp; <span class="title">back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T* <span class="title">data</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>具体实现如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; vector&lt;T&gt;::<span class="built_in">at</span>(<span class="type">size_t</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(index &lt;<span class="number">0</span> || index &gt;= _size)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;out of range&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _data[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; vector&lt;T&gt;::<span class="keyword">operator</span>[](<span class="type">size_t</span> index)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;<span class="built_in">at</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; vector&lt;T&gt;::<span class="built_in">front</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _data[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T&amp; vector&lt;T&gt;::<span class="built_in">back</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_size &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;vector is empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _data[_size<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">T* vector&lt;T&gt;::<span class="built_in">data</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-迭代器"><a href="#5-迭代器" class="headerlink" title="5.迭代器"></a>5.迭代器</h2><h3 id="5-1-迭代器使用实例"><a href="#5-1-迭代器使用实例" class="headerlink" title="5.1 迭代器使用实例"></a>5.1 迭代器使用实例</h3><p>在构建迭代器之前，先看看迭代器的用法，一般用于遍历容器中的各个元素</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; vec = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 1. 使用迭代器进行遍历</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;1. Iterate using iterators: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (std::vector&lt;<span class="type">int</span>&gt;::iterator it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 使用auto关键字进行简化</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;2. Iterate using auto keyword: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        std::cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 使用范围基于循环 (range-based loop)</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;3. Iterate using range-based loop: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; element : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4. 修改容器中的元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;4. Modify elements using iterators: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = vec.<span class="built_in">begin</span>(); it != vec.<span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">        *it = *it * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; element : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5. 插入元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;5. Insert elements using iterators: &quot;</span>;</span><br><span class="line">    <span class="keyword">auto</span> insertPos = vec.<span class="built_in">begin</span>() + <span class="number">2</span>; <span class="comment">// 在索引2的位置之后插入元素</span></span><br><span class="line">    vec.<span class="built_in">insert</span>(insertPos, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; element : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 6. 删除元素</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;6. Erase elements using iterators: &quot;</span>;</span><br><span class="line">    <span class="keyword">auto</span> erasePos = vec.<span class="built_in">begin</span>() + <span class="number">1</span>; <span class="comment">// 删除索引1的元素</span></span><br><span class="line">    vec.<span class="built_in">erase</span>(erasePos);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; element : vec) &#123;</span><br><span class="line">        std::cout &lt;&lt; element &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-2-迭代器类实现"><a href="#5-2-迭代器类实现" class="headerlink" title="5.2 迭代器类实现"></a>5.2 迭代器类实现</h3><p><code>iterrator</code>是一个类，在内部维护了一个指针，需要对其进行各种操作符重载，<code>iterrator</code>的具体实现如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>: <span class="comment">//迭代器</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Iterrator</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span>:</span><br><span class="line">            T * m_pointer;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="built_in">Iterrator</span>():<span class="built_in">m_pointer</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">            <span class="built_in">Iterrator</span>(T * pointer) : <span class="built_in">m_pointer</span>(pointer) &#123;&#125;</span><br><span class="line">            ~<span class="built_in">Iterrator</span>() &#123;&#125;</span><br><span class="line">        <span class="comment">/* 判断两个迭代器是否相等 */</span></span><br><span class="line">        <span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> Iterrator &amp; other)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_pointer == other.m_pointer;   </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">/* 迭代器赋值 */</span></span><br><span class="line">        Iterrator <span class="keyword">operator</span> = (<span class="type">const</span> Iterrator&amp; other)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pointer = other.m_pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 前缀递增*/</span></span><br><span class="line">        Iterrator &amp; <span class="keyword">operator</span> ++ ()</span><br><span class="line">        &#123;</span><br><span class="line">            m_pointer +=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 后缀递增 */</span></span><br><span class="line">        Iterrator <span class="keyword">operator</span> ++ (<span class="type">int</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Iterrator it = *<span class="keyword">this</span>;</span><br><span class="line">            ++(*<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> it;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterrator <span class="keyword">operator</span> + (<span class="type">int</span> i)</span><br><span class="line">        &#123;</span><br><span class="line">            Iterrator it = *<span class="keyword">this</span>;</span><br><span class="line">            it.m_pointer += i;</span><br><span class="line">            <span class="keyword">return</span> it;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterrator <span class="keyword">operator</span> += (<span class="type">int</span> i)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pointer += i;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterrator <span class="keyword">operator</span> -= (<span class="type">int</span> i)</span><br><span class="line">        &#123;</span><br><span class="line">            m_pointer -= i;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterrator <span class="keyword">operator</span> - (<span class="type">int</span> i)</span><br><span class="line">        &#123;</span><br><span class="line">            Iterrator it = *<span class="keyword">this</span>;</span><br><span class="line">            it.m_pointer -= i;</span><br><span class="line">            <span class="keyword">return</span> it;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="keyword">operator</span> - (<span class="type">const</span> Iterrator&amp; other) <span class="type">const</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_pointer - other.m_pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T &amp; <span class="keyword">operator</span> * ()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> *m_pointer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        T * <span class="keyword">operator</span> -&gt; ()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_pointer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure><blockquote><p>记录：在对<code>Iterrator</code>前++和后++重载时，如下:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 前缀递增*/</span></span><br><span class="line">Iterrator &amp; <span class="keyword">operator</span> ++ ()</span><br><span class="line">&#123;</span><br><span class="line">m_pointer +=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* 后缀递增 */</span></span><br><span class="line">Iterrator <span class="keyword">operator</span> ++ (<span class="type">int</span>)</span><br><span class="line">&#123;</span><br><span class="line">     Iterrator it = *<span class="keyword">this</span>;</span><br><span class="line">     ++(*<span class="keyword">this</span>);</span><br><span class="line">     <span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C++中，后缀递增操作符(it++)可以通过接受一个额外的int参数进行区分，这是由C++语言规范所定义的。根据规范，后缀递增操作符的函数参数列表中必须有一个int类型的参数，尽管在函数体内并没有使用该参数。</p><p>这种设计是为了在语法上能够区分前缀递增和后缀递增操作。当编译器遇到<code>it++</code>表达式时，它会根据后缀递增操作符的函数参数列表中是否存在一个额外的int参数来决定使用后缀递增操作符的重载函数。</p><p>编译器会将后缀递增操作符的调用转换为对重载的后缀递增操作符函数的调用，并传递一个编译器生成的临时整数参数（通常是0）。</p><p>请注意，这个整数参数的名称在函数体内并没有使用，因为它的存在只是为了与前缀递增操作符进行区分，而不是为了实际使用。</p></blockquote><h3 id="5-3-迭代器操作函数实现"><a href="#5-3-迭代器操作函数实现" class="headerlink" title="5.3 迭代器操作函数实现"></a>5.3 迭代器操作函数实现</h3><p><code>begin</code>用于获取头指针，<code>end</code>用于获取尾指针</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>: <span class="comment">//迭代器操作函数</span></span><br><span class="line">    <span class="function">Iterator <span class="title">begin</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Iterator <span class="title">end</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>具体实现如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::Iterator vector&lt;T&gt;::<span class="built_in">begin</span>()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;T&gt;::<span class="function">Iterator <span class="title">it</span><span class="params">(_data)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::Iterator vector&lt;T&gt;::<span class="built_in">end</span>()</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;T&gt;::<span class="function">Iterator <span class="title">it</span><span class="params">(_data + _size)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要使用<code>typename</code>显示的告诉编译器<code>vector&lt;T&gt;::Iterator</code>是一个类型</p><h2 id="6-容量"><a href="#6-容量" class="headerlink" title="6.容量"></a>6.容量</h2><p>和容量相关的接口函数比较简单，实现的接口如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>: <span class="comment">//容量</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">//判断容器是否为空</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">size</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">//获取容器元素个数</span></span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">max_size</span><span class="params">()</span> <span class="type">const</span></span>; <span class="comment">//获取容器最大存储个数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">reserve</span><span class="params">(<span class="type">size_t</span> new_cap)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">size_t</span> <span class="title">capacity</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">shrink_to_fit</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">bool</span> vector&lt;T&gt;::<span class="built_in">empty</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _size==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">size_t</span> vector&lt;T&gt;::<span class="built_in">size</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">size_t</span> vector&lt;T&gt;::<span class="built_in">max_size</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _capacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">size_t</span> vector&lt;T&gt;::<span class="built_in">capacity</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> _capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 重置容器大小 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">reserve</span>(<span class="type">size_t</span> new_cap)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_capacity &gt;= new_cap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _size += new_cap;</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果 _capacity 过大则缩减*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">shrink_to_fit</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">shrink</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-修改器"><a href="#7-修改器" class="headerlink" title="7.修改器"></a>7.修改器</h2><p>和修改容器有关的接口函数如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>: <span class="comment">//修改器</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Iterator <span class="title">insert</span><span class="params">(<span class="type">const</span> Iterator it ,<span class="type">const</span> T &amp; value)</span></span>;  </span><br><span class="line">    <span class="function">Iterator <span class="title">insert</span><span class="params">(<span class="type">const</span> Iterator it ,<span class="type">int</span> n,<span class="type">const</span> T &amp; value)</span></span>;</span><br><span class="line">    <span class="function">Iterator <span class="title">erase</span><span class="params">(<span class="type">const</span> Iterator it)</span></span>;</span><br><span class="line">    <span class="function">Iterator <span class="title">erase</span><span class="params">(<span class="type">const</span> Iterator first,<span class="type">const</span> Iterator last)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_back</span><span class="params">(<span class="type">const</span> T &amp; value)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pop_back</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">resize</span><span class="params">(<span class="type">size_t</span> size)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(vector &amp; other)</span></span>;</span><br></pre></td></tr></table></figure><ul><li><code>clear()</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* clear操作，直接将 _size 清零*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_size &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">logic_error</span>(<span class="string">&quot;vector is empty&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    _size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Iterator insert(const Iterator it ,int n,const T &amp; value)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在 it 的位置插入 n 个 T 元素*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::Iterator vector&lt;T&gt;::<span class="built_in">insert</span>(<span class="type">const</span> Iterator it ,<span class="type">int</span> n,<span class="type">const</span> T &amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> size = it - <span class="built_in">begin</span>();</span><br><span class="line">    _size += n;</span><br><span class="line">    <span class="comment">//如果有需要，则扩容</span></span><br><span class="line">    <span class="built_in">expand</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=_size; i&gt;size;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[i+n<span class="number">-1</span>] = _data[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i=<span class="number">0</span>; i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[size+i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vector&lt;T&gt;::<span class="built_in">Iterator</span>(_data + size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Iterator insert(const Iterator it ,const T &amp; value) </code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在 it 位置插入 1 个元素 value*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::Iterator vector&lt;T&gt;::<span class="built_in">insert</span>(<span class="type">const</span> Iterator it ,<span class="type">const</span> T &amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    _size+=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">expand</span>();</span><br><span class="line">    <span class="built_in">insert</span>(it,<span class="number">1</span>,value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Iterator erase(const Iterator it)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 删除 it 位置的元素 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::Iterator vector&lt;T&gt;::<span class="built_in">erase</span>(<span class="type">const</span> Iterator it)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">end</span>() - it == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _size -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> count = it - <span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">size_t</span> i = count; i &lt; _size <span class="number">-1</span> ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[i] = _data[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    _size -= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> it;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Iterator erase(const Iterator first,const Iterator last)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 区间删除 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">typename</span> vector&lt;T&gt;::Iterator vector&lt;T&gt;::<span class="built_in">erase</span>(<span class="type">const</span> Iterator first,<span class="type">const</span> Iterator last)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>( first == last)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> first;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> f = first - <span class="built_in">begin</span>();</span><br><span class="line">        <span class="type">int</span> l = last - <span class="built_in">begin</span>();</span><br><span class="line">        <span class="keyword">while</span> ( l &lt; _size) <span class="comment">// [last,_szie) 顺次前移 l - f 个单元</span></span><br><span class="line">        &#123;</span><br><span class="line">            _data[f++] = _data[l++];</span><br><span class="line">        &#125;</span><br><span class="line">        _size = f;  <span class="comment">//更新规模</span></span><br><span class="line">        <span class="built_in">shrink</span>(); <span class="comment">//若有必要则缩容</span></span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void push_back(const T &amp; value)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 在尾部插入一个元素value */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">push_back</span>(<span class="type">const</span> T&amp; value)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_size &lt; _capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        _data[_size] = value; </span><br><span class="line">        _size++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        _size++;</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">        <span class="type">int</span> index = _size - <span class="number">1</span>;</span><br><span class="line">        _data[index] = value; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void pop_back()</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 弹出最后一个元素 */</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">pop_back</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_size != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        _size--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void resize(size_t size)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">resize</span>(<span class="type">size_t</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(_size &gt; size)</span><br><span class="line">    &#123;</span><br><span class="line">        _size = size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(size &lt;= _capacity)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">size_t</span> i= _size; i &lt; size; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            _data[i] = <span class="built_in">T</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        _size = size;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    _size = size;</span><br><span class="line">    <span class="built_in">expand</span>(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void swap(vector &amp; other)</code></li></ul><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 两个 vector 交换*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="type">void</span> vector&lt;T&gt;::<span class="built_in">swap</span>(vector &amp; other)</span><br><span class="line">&#123;</span><br><span class="line">    T * data = other._data;</span><br><span class="line">    <span class="type">int</span> size = other._size;</span><br><span class="line">    <span class="type">int</span> capacity = other._capacity;</span><br><span class="line"></span><br><span class="line">    other._data = _data;</span><br><span class="line">    other._size = _size;</span><br><span class="line">    other._capacity = _capacity;</span><br><span class="line"></span><br><span class="line">    _data = data;</span><br><span class="line">    _size = size;</span><br><span class="line">    _capacity = capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-结束语"><a href="#8-结束语" class="headerlink" title="8.结束语"></a>8.结束语</h2><p>至此，<code>vector</code> 构造完毕，未进行测试，不知道是否有<code>bug</code></p>]]></content>
      
      
      <categories>
          
          <category> 手写STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
